

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Dec 20 01:13:30 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4520 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _LATDbits	set	3980
    55  0000                     _LATD	set	3980
    56  0000                     _TRISD	set	3989
    57  0000                     _TRISA	set	3986
    58  0000                     _ADCON0bits	set	4034
    59  0000                     _ADRESL	set	4035
    60  0000                     _ADRESH	set	4036
    61  0000                     _ADCON2bits	set	4032
    62  0000                     _ADCON2	set	4032
    63  0000                     _ADCON1	set	4033
    64  0000                     _ADFM	set	32263
    65                           
    66                           ; #config settings
    67  0000                     
    68                           	psect	cinit
    69  007116                     __pcinit:
    70                           	opt callstack 0
    71  007116                     start_initialization:
    72                           	opt callstack 0
    73  007116                     __initialization:
    74                           	opt callstack 0
    75                           
    76                           ; Clear objects allocated to BANK1 (144 bytes)
    77  007116  EE01  F000         	lfsr	0,__pbssBANK1
    78  00711A  0E90               	movlw	144
    79  00711C                     clear_0:
    80  00711C  6AEE               	clrf	postinc0,c
    81  00711E  06E8               	decf	wreg,f,c
    82  007120  E1FD               	bnz	clear_0
    83                           
    84                           ; Clear objects allocated to COMRAM (12 bytes)
    85  007122  EE00  F035         	lfsr	0,__pbssCOMRAM
    86  007126  0E0C               	movlw	12
    87  007128                     clear_1:
    88  007128  6AEE               	clrf	postinc0,c
    89  00712A  06E8               	decf	wreg,f,c
    90  00712C  E1FD               	bnz	clear_1
    91  00712E                     end_of_initialization:
    92                           	opt callstack 0
    93  00712E                     __end_of__initialization:
    94                           	opt callstack 0
    95  00712E  0100               	movlb	0
    96  007130  EF4D  F039         	goto	_main	;jump to C main() function
    97                           
    98                           	psect	bssCOMRAM
    99  000035                     __pbssCOMRAM:
   100                           	opt callstack 0
   101  000035                     _original:
   102                           	opt callstack 0
   103  000035                     	ds	12
   104                           
   105                           	psect	bssBANK1
   106  000100                     __pbssBANK1:
   107                           	opt callstack 0
   108  000100                     _rgb:
   109                           	opt callstack 0
   110  000100                     	ds	144
   111                           
   112                           	psect	cstackCOMRAM
   113  000001                     __pcstackCOMRAM:
   114                           	opt callstack 0
   115  000001                     ?_ADC_Read:
   116                           	opt callstack 0
   117  000001                     ?___wmul:
   118                           	opt callstack 0
   119  000001                     ?___awdiv:
   120                           	opt callstack 0
   121  000001                     ADC_Read@channle:
   122                           	opt callstack 0
   123  000001                     ___wmul@multiplier:
   124                           	opt callstack 0
   125  000001                     ___awdiv@dividend:
   126                           	opt callstack 0
   127                           
   128                           ; 2 bytes @ 0x0
   129  000001                     	ds	2
   130  000003                     ??_ADC_Read:
   131  000003                     ___wmul@multiplicand:
   132                           	opt callstack 0
   133  000003                     ___awdiv@divisor:
   134                           	opt callstack 0
   135                           
   136                           ; 2 bytes @ 0x2
   137  000003                     	ds	2
   138  000005                     ___awdiv@counter:
   139                           	opt callstack 0
   140  000005                     ADC_Read@digital:
   141                           	opt callstack 0
   142  000005                     ___wmul@product:
   143                           	opt callstack 0
   144                           
   145                           ; 2 bytes @ 0x4
   146  000005                     	ds	1
   147  000006                     ___awdiv@sign:
   148                           	opt callstack 0
   149                           
   150                           ; 1 bytes @ 0x5
   151  000006                     	ds	1
   152  000007                     initial@i:
   153                           	opt callstack 0
   154  000007                     ___awdiv@quotient:
   155                           	opt callstack 0
   156                           
   157                           ; 2 bytes @ 0x6
   158  000007                     	ds	2
   159  000009                     rotate_r@val:
   160                           	opt callstack 0
   161  000009                     rotate_l@val:
   162                           	opt callstack 0
   163                           
   164                           ; 2 bytes @ 0x8
   165  000009                     	ds	2
   166  00000B                     ??_rotate_r:
   167  00000B                     ??_rotate_l:
   168                           
   169                           ; 1 bytes @ 0xA
   170  00000B                     	ds	1
   171  00000C                     rotate_r@buf:
   172                           	opt callstack 0
   173  00000C                     rotate_l@buf:
   174                           	opt callstack 0
   175                           
   176                           ; 2 bytes @ 0xB
   177  00000C                     	ds	2
   178  00000E                     rotate_r@buf_207:
   179                           	opt callstack 0
   180  00000E                     rotate_l@buf_227:
   181                           	opt callstack 0
   182                           
   183                           ; 2 bytes @ 0xD
   184  00000E                     	ds	2
   185  000010                     rotate_r@tempa:
   186                           	opt callstack 0
   187  000010                     rotate_l@tempa:
   188                           	opt callstack 0
   189                           
   190                           ; 6 bytes @ 0xF
   191  000010                     	ds	6
   192  000016                     rotate_r@tempb:
   193                           	opt callstack 0
   194  000016                     rotate_l@tempb:
   195                           	opt callstack 0
   196                           
   197                           ; 6 bytes @ 0x15
   198  000016                     	ds	6
   199  00001C                     rotate_r@tempc:
   200                           	opt callstack 0
   201  00001C                     rotate_l@tempc:
   202                           	opt callstack 0
   203                           
   204                           ; 6 bytes @ 0x1B
   205  00001C                     	ds	6
   206  000022                     rotate_r@tempd:
   207                           	opt callstack 0
   208  000022                     rotate_l@tempd:
   209                           	opt callstack 0
   210                           
   211                           ; 6 bytes @ 0x21
   212  000022                     	ds	6
   213  000028                     ??_main:
   214                           
   215                           ; 1 bytes @ 0x27
   216  000028                     	ds	1
   217  000029                     main@temp:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x28
   221  000029                     	ds	2
   222  00002B                     main@val:
   223                           	opt callstack 0
   224                           
   225                           ; 2 bytes @ 0x2A
   226  00002B                     	ds	2
   227  00002D                     main@val_337:
   228                           	opt callstack 0
   229                           
   230                           ; 2 bytes @ 0x2C
   231  00002D                     	ds	2
   232  00002F                     main@j:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x2E
   236  00002F                     	ds	2
   237  000031                     main@turn:
   238                           	opt callstack 0
   239                           
   240                           ; 2 bytes @ 0x30
   241  000031                     	ds	2
   242  000033                     main@i:
   243                           	opt callstack 0
   244                           
   245                           ; 2 bytes @ 0x32
   246  000033                     	ds	2
   247                           
   248 ;;
   249 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   250 ;;
   251 ;; *************** function _main *****************
   252 ;; Defined at:
   253 ;;		line 418 in file "newmain.c"
   254 ;; Parameters:    Size  Location     Type
   255 ;;		None
   256 ;; Auto vars:     Size  Location     Type
   257 ;;  val             2   44[COMRAM] int 
   258 ;;  val             2   42[COMRAM] int 
   259 ;;  temp            2   40[COMRAM] int 
   260 ;;  i               2   50[COMRAM] int 
   261 ;;  turn            2   48[COMRAM] int 
   262 ;;  j               2   46[COMRAM] int 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   272 ;;      Params:         0       0       0       0       0       0       0
   273 ;;      Locals:        12       0       0       0       0       0       0
   274 ;;      Temps:          1       0       0       0       0       0       0
   275 ;;      Totals:        13       0       0       0       0       0       0
   276 ;;Total ram usage:       13 bytes
   277 ;; Hardware stack levels required when called:    2
   278 ;; This function calls:
   279 ;;		_ADC_Initialize
   280 ;;		_ADC_Read
   281 ;;		___awdiv
   282 ;;		___wmul
   283 ;;		_initial
   284 ;;		_rotate_l
   285 ;;		_rotate_r
   286 ;; This function is called by:
   287 ;;		Startup code after reset
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291                           	psect	text0
   292  00729A                     __ptext0:
   293                           	opt callstack 0
   294  00729A                     _main:
   295                           	opt callstack 29
   296  00729A                     
   297                           ;newmain.c: 419:     initial();
   298  00729A  ECFF  F03C         	call	_initial	;wreg free
   299  00729E                     
   300                           ;newmain.c: 420:     ADC_Initialize();
   301  00729E  EC7E  F038         	call	_ADC_Initialize	;wreg free
   302  0072A2                     
   303                           ;newmain.c: 421:     TRISD =0;
   304  0072A2  0E00               	movlw	0
   305  0072A4  6E95               	movwf	149,c	;volatile
   306  0072A6                     
   307                           ;newmain.c: 422:     LATD = 0;
   308  0072A6  0E00               	movlw	0
   309  0072A8  6E8C               	movwf	140,c	;volatile
   310  0072AA                     
   311                           ;newmain.c: 423:     LATDbits.LATD3 = 1;
   312  0072AA  868C               	bsf	140,3,c	;volatile
   313  0072AC                     
   314                           ;newmain.c: 424:     int i = 0;
   315  0072AC  0E00               	movlw	0
   316  0072AE  6E34               	movwf	(main@i+1)^0,c
   317  0072B0  0E00               	movlw	0
   318  0072B2  6E33               	movwf	main@i^0,c
   319  0072B4                     
   320                           ;newmain.c: 425:     int j;;newmain.c: 426:     for(j=0; j<6; j++){
   321  0072B4  0E00               	movlw	0
   322  0072B6  6E30               	movwf	(main@j+1)^0,c
   323  0072B8  0E00               	movlw	0
   324  0072BA  6E2F               	movwf	main@j^0,c
   325  0072BC                     l2165:
   326                           
   327                           ;newmain.c: 429:         original[j] = 0;
   328  0072BC  90D8               	bcf	status,0,c
   329  0072BE  342F               	rlcf	main@j^0,w,c
   330  0072C0  6ED9               	movwf	fsr2l,c
   331  0072C2  3430               	rlcf	(main@j+1)^0,w,c
   332  0072C4  6EDA               	movwf	fsr2h,c
   333  0072C6  0E35               	movlw	low _original
   334  0072C8  26D9               	addwf	fsr2l,f,c
   335  0072CA  0E00               	movlw	high _original
   336  0072CC  22DA               	addwfc	fsr2h,f,c
   337  0072CE  0E00               	movlw	0
   338  0072D0  6EDE               	movwf	postinc2,c
   339  0072D2  0E00               	movlw	0
   340  0072D4  6EDD               	movwf	postdec2,c
   341  0072D6                     
   342                           ;newmain.c: 430:     }
   343  0072D6  4A2F               	infsnz	main@j^0,f,c
   344  0072D8  2A30               	incf	(main@j+1)^0,f,c
   345  0072DA  BE30               	btfsc	(main@j+1)^0,7,c
   346  0072DC  EF79  F039         	goto	u1131
   347  0072E0  5030               	movf	(main@j+1)^0,w,c
   348  0072E2  E109               	bnz	u1130
   349  0072E4  0E06               	movlw	6
   350  0072E6  5C2F               	subwf	main@j^0,w,c
   351  0072E8  A0D8               	btfss	status,0,c
   352  0072EA  EF79  F039         	goto	u1131
   353  0072EE  EF7B  F039         	goto	u1130
   354  0072F2                     u1131:
   355  0072F2  EF5E  F039         	goto	l2165
   356  0072F6                     u1130:
   357  0072F6                     l2171:
   358                           
   359                           ;newmain.c: 431:     int turn = 0;
   360  0072F6  0E00               	movlw	0
   361  0072F8  6E32               	movwf	(main@turn+1)^0,c
   362  0072FA  0E00               	movlw	0
   363  0072FC  6E31               	movwf	main@turn^0,c
   364  0072FE                     l2173:
   365                           
   366                           ;newmain.c: 444:             if(turn == 2) {
   367  0072FE  0E02               	movlw	2
   368  007300  1831               	xorwf	main@turn^0,w,c
   369  007302  1032               	iorwf	(main@turn+1)^0,w,c
   370  007304  A4D8               	btfss	status,2,c
   371  007306  EF87  F039         	goto	u1141
   372  00730A  EF89  F039         	goto	u1140
   373  00730E                     u1141:
   374  00730E  EFB3  F039         	goto	l2181
   375  007312                     u1140:
   376  007312                     
   377                           ;newmain.c: 445:                 int val = ADC_Read(6);
   378  007312  0E00               	movlw	0
   379  007314  6E02               	movwf	(ADC_Read@channle+1)^0,c
   380  007316  0E06               	movlw	6
   381  007318  6E01               	movwf	ADC_Read@channle^0,c
   382  00731A  ECAD  F038         	call	_ADC_Read	;wreg free
   383  00731E  C001  F02B         	movff	?_ADC_Read,main@val
   384  007322  C002  F02C         	movff	?_ADC_Read+1,main@val+1
   385  007326                     
   386                           ;newmain.c: 446:                 rotate_r(val/300);
   387  007326  C02B  F001         	movff	main@val,___awdiv@dividend
   388  00732A  C02C  F002         	movff	main@val+1,___awdiv@dividend+1
   389  00732E  0E01               	movlw	1
   390  007330  6E04               	movwf	(___awdiv@divisor+1)^0,c
   391  007332  0E2C               	movlw	44
   392  007334  6E03               	movwf	___awdiv@divisor^0,c
   393  007336  ECEB  F038         	call	___awdiv	;wreg free
   394  00733A  C001  F009         	movff	?___awdiv,rotate_r@val
   395  00733E  C002  F00A         	movff	?___awdiv+1,rotate_r@val+1
   396  007342  ECB8  F03B         	call	_rotate_r	;wreg free
   397  007346                     
   398                           ;newmain.c: 447:                 original[2] = val/300;
   399  007346  C02B  F001         	movff	main@val,___awdiv@dividend
   400  00734A  C02C  F002         	movff	main@val+1,___awdiv@dividend+1
   401  00734E  0E01               	movlw	1
   402  007350  6E04               	movwf	(___awdiv@divisor+1)^0,c
   403  007352  0E2C               	movlw	44
   404  007354  6E03               	movwf	___awdiv@divisor^0,c
   405  007356  ECEB  F038         	call	___awdiv	;wreg free
   406  00735A  C001  F039         	movff	?___awdiv,_original+4	;volatile
   407  00735E  C002  F03A         	movff	?___awdiv+1,_original+5	;volatile
   408                           
   409                           ;newmain.c: 448:             }
   410  007362  EFE5  F039         	goto	l2189
   411  007366                     l2181:
   412  007366  0E03               	movlw	3
   413  007368  1831               	xorwf	main@turn^0,w,c
   414  00736A  1032               	iorwf	(main@turn+1)^0,w,c
   415  00736C  A4D8               	btfss	status,2,c
   416  00736E  EFBB  F039         	goto	u1151
   417  007372  EFBD  F039         	goto	u1150
   418  007376                     u1151:
   419  007376  EFE5  F039         	goto	l2189
   420  00737A                     u1150:
   421  00737A                     
   422                           ;newmain.c: 450:                 int val = ADC_Read(7);
   423  00737A  0E00               	movlw	0
   424  00737C  6E02               	movwf	(ADC_Read@channle+1)^0,c
   425  00737E  0E07               	movlw	7
   426  007380  6E01               	movwf	ADC_Read@channle^0,c
   427  007382  ECAD  F038         	call	_ADC_Read	;wreg free
   428  007386  C001  F02D         	movff	?_ADC_Read,main@val_337
   429  00738A  C002  F02E         	movff	?_ADC_Read+1,main@val_337+1
   430  00738E                     
   431                           ;newmain.c: 451:                 rotate_l(val/300);
   432  00738E  C02D  F001         	movff	main@val_337,___awdiv@dividend
   433  007392  C02E  F002         	movff	main@val_337+1,___awdiv@dividend+1
   434  007396  0E01               	movlw	1
   435  007398  6E04               	movwf	(___awdiv@divisor+1)^0,c
   436  00739A  0E2C               	movlw	44
   437  00739C  6E03               	movwf	___awdiv@divisor^0,c
   438  00739E  ECEB  F038         	call	___awdiv	;wreg free
   439  0073A2  C001  F009         	movff	?___awdiv,rotate_l@val
   440  0073A6  C002  F00A         	movff	?___awdiv+1,rotate_l@val+1
   441  0073AA  EC71  F03A         	call	_rotate_l	;wreg free
   442  0073AE                     
   443                           ;newmain.c: 452:                 original[3] = val/300;
   444  0073AE  C02D  F001         	movff	main@val_337,___awdiv@dividend
   445  0073B2  C02E  F002         	movff	main@val_337+1,___awdiv@dividend+1
   446  0073B6  0E01               	movlw	1
   447  0073B8  6E04               	movwf	(___awdiv@divisor+1)^0,c
   448  0073BA  0E2C               	movlw	44
   449  0073BC  6E03               	movwf	___awdiv@divisor^0,c
   450  0073BE  ECEB  F038         	call	___awdiv	;wreg free
   451  0073C2  C001  F03B         	movff	?___awdiv,_original+6	;volatile
   452  0073C6  C002  F03C         	movff	?___awdiv+1,_original+7	;volatile
   453  0073CA                     l2189:
   454                           
   455                           ;newmain.c: 466:         LATDbits.LATD0 = rgb[i].r;
   456  0073CA  C033  F001         	movff	main@i,___wmul@multiplier
   457  0073CE  C034  F002         	movff	main@i+1,___wmul@multiplier+1
   458  0073D2  0E00               	movlw	0
   459  0073D4  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   460  0073D6  0E06               	movlw	6
   461  0073D8  6E03               	movwf	___wmul@multiplicand^0,c
   462  0073DA  EC9A  F038         	call	___wmul	;wreg free
   463  0073DE  0E00               	movlw	low _rgb
   464  0073E0  2401               	addwf	?___wmul^0,w,c
   465  0073E2  6ED9               	movwf	fsr2l,c
   466  0073E4  0E01               	movlw	high _rgb
   467  0073E6  2002               	addwfc	(?___wmul+1)^0,w,c
   468  0073E8  6EDA               	movwf	fsr2h,c
   469  0073EA  50DF               	movf	indf2,w,c
   470  0073EC  6E28               	movwf	??_main^0,c
   471  0073EE  508C               	movf	140,w,c	;volatile
   472  0073F0  1828               	xorwf	??_main^0,w,c
   473  0073F2  0BFE               	andlw	-2
   474  0073F4  1828               	xorwf	??_main^0,w,c
   475  0073F6  6E8C               	movwf	140,c	;volatile
   476  0073F8                     
   477                           ;newmain.c: 467:         LATDbits.LATD1 = rgb[i].g;
   478  0073F8  C033  F001         	movff	main@i,___wmul@multiplier
   479  0073FC  C034  F002         	movff	main@i+1,___wmul@multiplier+1
   480  007400  0E00               	movlw	0
   481  007402  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   482  007404  0E06               	movlw	6
   483  007406  6E03               	movwf	___wmul@multiplicand^0,c
   484  007408  EC9A  F038         	call	___wmul	;wreg free
   485  00740C  0E02               	movlw	low (_rgb+2)
   486  00740E  2401               	addwf	?___wmul^0,w,c
   487  007410  6ED9               	movwf	fsr2l,c
   488  007412  0E01               	movlw	high (_rgb+2)
   489  007414  2002               	addwfc	(?___wmul+1)^0,w,c
   490  007416  6EDA               	movwf	fsr2h,c
   491  007418  50DF               	movf	indf2,w,c
   492  00741A  6E28               	movwf	??_main^0,c
   493  00741C  4628               	rlncf	??_main^0,f,c
   494  00741E  508C               	movf	140,w,c	;volatile
   495  007420  1828               	xorwf	??_main^0,w,c
   496  007422  0BFD               	andlw	-3
   497  007424  1828               	xorwf	??_main^0,w,c
   498  007426  6E8C               	movwf	140,c	;volatile
   499  007428                     
   500                           ;newmain.c: 468:         LATDbits.LATD2 = rgb[i].b;
   501  007428  C033  F001         	movff	main@i,___wmul@multiplier
   502  00742C  C034  F002         	movff	main@i+1,___wmul@multiplier+1
   503  007430  0E00               	movlw	0
   504  007432  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   505  007434  0E06               	movlw	6
   506  007436  6E03               	movwf	___wmul@multiplicand^0,c
   507  007438  EC9A  F038         	call	___wmul	;wreg free
   508  00743C  0E04               	movlw	low (_rgb+4)
   509  00743E  2401               	addwf	?___wmul^0,w,c
   510  007440  6ED9               	movwf	fsr2l,c
   511  007442  0E01               	movlw	high (_rgb+4)
   512  007444  2002               	addwfc	(?___wmul+1)^0,w,c
   513  007446  6EDA               	movwf	fsr2h,c
   514  007448  50DF               	movf	indf2,w,c
   515  00744A  6E28               	movwf	??_main^0,c
   516  00744C  4628               	rlncf	??_main^0,f,c
   517  00744E  4628               	rlncf	??_main^0,f,c
   518  007450  508C               	movf	140,w,c	;volatile
   519  007452  1828               	xorwf	??_main^0,w,c
   520  007454  0BFB               	andlw	-5
   521  007456  1828               	xorwf	??_main^0,w,c
   522  007458  6E8C               	movwf	140,c	;volatile
   523  00745A                     
   524                           ;newmain.c: 470:         LATDbits.LATD0 = 1;
   525  00745A  808C               	bsf	140,0,c	;volatile
   526  00745C                     
   527                           ;newmain.c: 471:         LATDbits.LATD1 = 1;
   528  00745C  828C               	bsf	140,1,c	;volatile
   529  00745E                     
   530                           ;newmain.c: 472:         LATDbits.LATD2 = 1;
   531  00745E  848C               	bsf	140,2,c	;volatile
   532  007460                     
   533                           ;newmain.c: 473:         int temp = LATDbits.LATD6;
   534  007460  BC8C               	btfsc	140,6,c	;volatile
   535  007462  EF35  F03A         	goto	u1161
   536  007466  EF39  F03A         	goto	u1160
   537  00746A                     u1161:
   538  00746A  6A28               	clrf	??_main^0,c
   539  00746C  2A28               	incf	??_main^0,f,c
   540  00746E  EF3A  F03A         	goto	u1168
   541  007472                     u1160:
   542  007472  6A28               	clrf	??_main^0,c
   543  007474                     u1168:
   544  007474  5028               	movf	??_main^0,w,c
   545  007476  6E29               	movwf	main@temp^0,c
   546  007478  6A2A               	clrf	(main@temp+1)^0,c
   547  00747A                     
   548                           ;newmain.c: 474:         LATDbits.LATD6 = LATDbits.LATD5;
   549  00747A  AA8C               	btfss	140,5,c	;volatile
   550  00747C  D002               	bra	u1175
   551  00747E  8C8C               	bsf	140,6,c	;volatile
   552  007480  D001               	bra	u1177
   553  007482                     u1175:
   554  007482  9C8C               	bcf	140,6,c	;volatile
   555  007484                     u1177:
   556  007484                     
   557                           ;newmain.c: 475:         LATDbits.LATD5 = LATDbits.LATD4;
   558  007484  A88C               	btfss	140,4,c	;volatile
   559  007486  D002               	bra	u1185
   560  007488  8A8C               	bsf	140,5,c	;volatile
   561  00748A  D001               	bra	u1187
   562  00748C                     u1185:
   563  00748C  9A8C               	bcf	140,5,c	;volatile
   564  00748E                     u1187:
   565  00748E                     
   566                           ;newmain.c: 476:         LATDbits.LATD4 = LATDbits.LATD3;
   567  00748E  A68C               	btfss	140,3,c	;volatile
   568  007490  D002               	bra	u1195
   569  007492  888C               	bsf	140,4,c	;volatile
   570  007494  D001               	bra	u1197
   571  007496                     u1195:
   572  007496  988C               	bcf	140,4,c	;volatile
   573  007498                     u1197:
   574  007498                     
   575                           ;newmain.c: 477:         LATDbits.LATD3 = temp;
   576  007498  B029               	btfsc	main@temp^0,0,c
   577  00749A  D002               	bra	u1205
   578  00749C  968C               	bcf	140,3,c	;volatile
   579  00749E  D001               	bra	u1206
   580  0074A0                     u1205:
   581  0074A0  868C               	bsf	140,3,c	;volatile
   582  0074A2                     u1206:
   583  0074A2                     
   584                           ;newmain.c: 478:         i++;
   585  0074A2  4A33               	infsnz	main@i^0,f,c
   586  0074A4  2A34               	incf	(main@i+1)^0,f,c
   587  0074A6                     
   588                           ;newmain.c: 479:         if(i == 4){
   589  0074A6  0E04               	movlw	4
   590  0074A8  1833               	xorwf	main@i^0,w,c
   591  0074AA  1034               	iorwf	(main@i+1)^0,w,c
   592  0074AC  A4D8               	btfss	status,2,c
   593  0074AE  EF5B  F03A         	goto	u1211
   594  0074B2  EF5D  F03A         	goto	u1210
   595  0074B6                     u1211:
   596  0074B6  EF61  F03A         	goto	l2217
   597  0074BA                     u1210:
   598  0074BA                     
   599                           ;newmain.c: 480:             i = 0;
   600  0074BA  0E00               	movlw	0
   601  0074BC  6E34               	movwf	(main@i+1)^0,c
   602  0074BE  0E00               	movlw	0
   603  0074C0  6E33               	movwf	main@i^0,c
   604  0074C2                     l2217:
   605                           
   606                           ;newmain.c: 482:         turn++;
   607  0074C2  4A31               	infsnz	main@turn^0,f,c
   608  0074C4  2A32               	incf	(main@turn+1)^0,f,c
   609  0074C6                     
   610                           ;newmain.c: 483:         if(turn == 6) turn = 0;
   611  0074C6  0E06               	movlw	6
   612  0074C8  1831               	xorwf	main@turn^0,w,c
   613  0074CA  1032               	iorwf	(main@turn+1)^0,w,c
   614  0074CC  A4D8               	btfss	status,2,c
   615  0074CE  EF6B  F03A         	goto	u1221
   616  0074D2  EF6D  F03A         	goto	u1220
   617  0074D6                     u1221:
   618  0074D6  EF7F  F039         	goto	l2173
   619  0074DA                     u1220:
   620  0074DA  EF7B  F039         	goto	l2171
   621  0074DE  EF00  F000         	goto	start
   622  0074E2                     __end_of_main:
   623                           	opt callstack 0
   624                           
   625 ;; *************** function _rotate_r *****************
   626 ;; Defined at:
   627 ;;		line 137 in file "newmain.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  val             2    8[COMRAM] int 
   630 ;; Auto vars:     Size  Location     Type
   631 ;;  tempd           6   33[COMRAM] struct RGB
   632 ;;  tempc           6   27[COMRAM] struct RGB
   633 ;;  tempb           6   21[COMRAM] struct RGB
   634 ;;  tempa           6   15[COMRAM] struct RGB
   635 ;;  buf             2   13[COMRAM] int 
   636 ;;  buf             2   11[COMRAM] int 
   637 ;; Return value:  Size  Location     Type
   638 ;;                  1    wreg      void 
   639 ;; Registers used:
   640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   641 ;; Tracked objects:
   642 ;;		On entry : 0/0
   643 ;;		On exit  : 0/0
   644 ;;		Unchanged: 0/0
   645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   646 ;;      Params:         2       0       0       0       0       0       0
   647 ;;      Locals:        28       0       0       0       0       0       0
   648 ;;      Temps:          1       0       0       0       0       0       0
   649 ;;      Totals:        31       0       0       0       0       0       0
   650 ;;Total ram usage:       31 bytes
   651 ;; Hardware stack levels used:    1
   652 ;; This function calls:
   653 ;;		Nothing
   654 ;; This function is called by:
   655 ;;		_main
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text1
   660  007770                     __ptext1:
   661                           	opt callstack 0
   662  007770                     _rotate_r:
   663                           	opt callstack 30
   664  007770                     
   665                           ;newmain.c: 138:     if(val > 3){
   666  007770  BE0A               	btfsc	(rotate_r@val+1)^0,7,c
   667  007772  EFC4  F03B         	goto	u891
   668  007776  500A               	movf	(rotate_r@val+1)^0,w,c
   669  007778  E109               	bnz	u890
   670  00777A  0E04               	movlw	4
   671  00777C  5C09               	subwf	rotate_r@val^0,w,c
   672  00777E  A0D8               	btfss	status,0,c
   673  007780  EFC4  F03B         	goto	u891
   674  007784  EFC6  F03B         	goto	u890
   675  007788                     u891:
   676  007788  EFCA  F03B         	goto	l1867
   677  00778C                     u890:
   678  00778C                     
   679                           ;newmain.c: 139:         val = 3;
   680  00778C  0E00               	movlw	0
   681  00778E  6E0A               	movwf	(rotate_r@val+1)^0,c
   682  007790  0E03               	movlw	3
   683  007792  6E09               	movwf	rotate_r@val^0,c
   684  007794                     l1867:
   685                           
   686                           ;newmain.c: 141:     if(val>original[2]){
   687  007794  5009               	movf	rotate_r@val^0,w,c
   688  007796  5C39               	subwf	(_original+4)^0,w,c	;volatile
   689  007798  503A               	movf	(_original+5)^0,w,c	;volatile
   690  00779A  0A80               	xorlw	128
   691  00779C  6E0B               	movwf	??_rotate_r^0,c
   692  00779E  500A               	movf	(rotate_r@val+1)^0,w,c
   693  0077A0  0A80               	xorlw	128
   694  0077A2  580B               	subwfb	??_rotate_r^0,w,c
   695  0077A4  B0D8               	btfsc	status,0,c
   696  0077A6  EFD7  F03B         	goto	u901
   697  0077AA  EFD9  F03B         	goto	u900
   698  0077AE                     u901:
   699  0077AE  EF65  F03C         	goto	l1925
   700  0077B2                     u900:
   701  0077B2                     
   702                           ;newmain.c: 142:         int buf = val-original[2];
   703  0077B2  5039               	movf	(_original+4)^0,w,c	;volatile
   704  0077B4  5C09               	subwf	rotate_r@val^0,w,c
   705  0077B6  6E0C               	movwf	rotate_r@buf^0,c
   706  0077B8  503A               	movf	(_original+5)^0,w,c	;volatile
   707  0077BA  580A               	subwfb	(rotate_r@val+1)^0,w,c
   708  0077BC  6E0D               	movwf	(rotate_r@buf+1)^0,c
   709                           
   710                           ;newmain.c: 143:         while(buf>0){
   711  0077BE  EF56  F03C         	goto	l1923
   712  0077C2                     l1871:
   713                           
   714                           ;newmain.c: 144:             rgbarray tempa = rgb[2];
   715  0077C2  EE21  F00C         	lfsr	2,_rgb+12	;volatile
   716  0077C6  EE10  F010         	lfsr	1,rotate_r@tempa
   717  0077CA  0E05               	movlw	5
   718  0077CC                     u911:
   719  0077CC  CFDB FFE3          	movff	plusw2,plusw1
   720  0077D0  06E8               	decf	wreg,f,c
   721  0077D2  E2FC               	bc	u911
   722                           
   723                           ;newmain.c: 145:             rgbarray tempb = rgb[3];
   724  0077D4  EE21  F012         	lfsr	2,_rgb+18	;volatile
   725  0077D8  EE10  F016         	lfsr	1,rotate_r@tempb
   726  0077DC  0E05               	movlw	5
   727  0077DE                     u921:
   728  0077DE  CFDB FFE3          	movff	plusw2,plusw1
   729  0077E2  06E8               	decf	wreg,f,c
   730  0077E4  E2FC               	bc	u921
   731  0077E6                     
   732                           ;newmain.c: 146:             rgb[2].r = rgb[6].r;rgb[3].r = rgb[7].r;
   733  0077E6  C124  F10C         	movff	_rgb+36,_rgb+12	;volatile
   734  0077EA  C125  F10D         	movff	_rgb+37,_rgb+13	;volatile
   735  0077EE  C12A  F112         	movff	_rgb+42,_rgb+18	;volatile
   736  0077F2  C12B  F113         	movff	_rgb+43,_rgb+19	;volatile
   737  0077F6                     
   738                           ;newmain.c: 147:             rgb[2].g = rgb[6].g;rgb[3].g = rgb[7].g;
   739  0077F6  C126  F10E         	movff	_rgb+38,_rgb+14	;volatile
   740  0077FA  C127  F10F         	movff	_rgb+39,_rgb+15	;volatile
   741  0077FE  C12C  F114         	movff	_rgb+44,_rgb+20	;volatile
   742  007802  C12D  F115         	movff	_rgb+45,_rgb+21	;volatile
   743  007806                     
   744                           ;newmain.c: 148:             rgb[2].b = rgb[6].b;rgb[3].b = rgb[7].b;
   745  007806  C128  F110         	movff	_rgb+40,_rgb+16	;volatile
   746  00780A  C129  F111         	movff	_rgb+41,_rgb+17	;volatile
   747  00780E  C12E  F116         	movff	_rgb+46,_rgb+22	;volatile
   748  007812  C12F  F117         	movff	_rgb+47,_rgb+23	;volatile
   749  007816                     
   750                           ;newmain.c: 149:             rgb[6].r = rgb[10].r;rgb[7].r = rgb[11].r;
   751  007816  C13C  F124         	movff	_rgb+60,_rgb+36	;volatile
   752  00781A  C13D  F125         	movff	_rgb+61,_rgb+37	;volatile
   753  00781E  C142  F12A         	movff	_rgb+66,_rgb+42	;volatile
   754  007822  C143  F12B         	movff	_rgb+67,_rgb+43	;volatile
   755  007826                     
   756                           ;newmain.c: 150:             rgb[6].g = rgb[10].g;rgb[7].g = rgb[11].g;
   757  007826  C13E  F126         	movff	_rgb+62,_rgb+38	;volatile
   758  00782A  C13F  F127         	movff	_rgb+63,_rgb+39	;volatile
   759  00782E  C144  F12C         	movff	_rgb+68,_rgb+44	;volatile
   760  007832  C145  F12D         	movff	_rgb+69,_rgb+45	;volatile
   761  007836                     
   762                           ;newmain.c: 151:             rgb[6].b = rgb[10].b;rgb[7].b = rgb[11].b;
   763  007836  C140  F128         	movff	_rgb+64,_rgb+40	;volatile
   764  00783A  C141  F129         	movff	_rgb+65,_rgb+41	;volatile
   765  00783E  C146  F12E         	movff	_rgb+70,_rgb+46	;volatile
   766  007842  C147  F12F         	movff	_rgb+71,_rgb+47	;volatile
   767  007846                     
   768                           ;newmain.c: 152:             rgb[10].r = rgb[14].r;rgb[11].r = rgb[15].r;
   769  007846  C154  F13C         	movff	_rgb+84,_rgb+60	;volatile
   770  00784A  C155  F13D         	movff	_rgb+85,_rgb+61	;volatile
   771  00784E  C15A  F142         	movff	_rgb+90,_rgb+66	;volatile
   772  007852  C15B  F143         	movff	_rgb+91,_rgb+67	;volatile
   773  007856                     
   774                           ;newmain.c: 153:             rgb[10].g = rgb[14].g;rgb[11].g = rgb[15].g;
   775  007856  C156  F13E         	movff	_rgb+86,_rgb+62	;volatile
   776  00785A  C157  F13F         	movff	_rgb+87,_rgb+63	;volatile
   777  00785E  C15C  F144         	movff	_rgb+92,_rgb+68	;volatile
   778  007862  C15D  F145         	movff	_rgb+93,_rgb+69	;volatile
   779  007866                     
   780                           ;newmain.c: 154:             rgb[10].b = rgb[14].b;rgb[11].b = rgb[15].b;
   781  007866  C158  F140         	movff	_rgb+88,_rgb+64	;volatile
   782  00786A  C159  F141         	movff	_rgb+89,_rgb+65	;volatile
   783  00786E  C15E  F146         	movff	_rgb+94,_rgb+70	;volatile
   784  007872  C15F  F147         	movff	_rgb+95,_rgb+71	;volatile
   785  007876                     
   786                           ;newmain.c: 155:             rgb[14].r = tempa.r;rgb[15].r = tempb.r;
   787  007876  C010  F154         	movff	rotate_r@tempa,_rgb+84	;volatile
   788  00787A  C011  F155         	movff	rotate_r@tempa+1,_rgb+85	;volatile
   789  00787E  C016  F15A         	movff	rotate_r@tempb,_rgb+90	;volatile
   790  007882  C017  F15B         	movff	rotate_r@tempb+1,_rgb+91	;volatile
   791  007886                     
   792                           ;newmain.c: 156:             rgb[14].g = tempa.g;rgb[15].g = tempb.g;
   793  007886  C012  F156         	movff	rotate_r@tempa+2,_rgb+86	;volatile
   794  00788A  C013  F157         	movff	rotate_r@tempa+3,_rgb+87	;volatile
   795  00788E  C018  F15C         	movff	rotate_r@tempb+2,_rgb+92	;volatile
   796  007892  C019  F15D         	movff	rotate_r@tempb+3,_rgb+93	;volatile
   797  007896                     
   798                           ;newmain.c: 157:             rgb[14].b = tempa.b;rgb[15].b = tempb.b;
   799  007896  C014  F158         	movff	rotate_r@tempa+4,_rgb+88	;volatile
   800  00789A  C015  F159         	movff	rotate_r@tempa+5,_rgb+89	;volatile
   801  00789E  C01A  F15E         	movff	rotate_r@tempb+4,_rgb+94	;volatile
   802  0078A2  C01B  F15F         	movff	rotate_r@tempb+5,_rgb+95	;volatile
   803  0078A6                     
   804                           ;newmain.c: 158:             buf--;
   805  0078A6  060C               	decf	rotate_r@buf^0,f,c
   806  0078A8  A0D8               	btfss	status,0,c
   807  0078AA  060D               	decf	(rotate_r@buf+1)^0,f,c
   808  0078AC                     l1923:
   809                           
   810                           ;newmain.c: 143:         while(buf>0){
   811  0078AC  BE0D               	btfsc	(rotate_r@buf+1)^0,7,c
   812  0078AE  EF63  F03C         	goto	u930
   813  0078B2  500D               	movf	(rotate_r@buf+1)^0,w,c
   814  0078B4  E106               	bnz	u931
   815  0078B6  040C               	decf	rotate_r@buf^0,w,c
   816  0078B8  B0D8               	btfsc	status,0,c
   817  0078BA  EF61  F03C         	goto	u931
   818  0078BE  EF63  F03C         	goto	u930
   819  0078C2                     u931:
   820  0078C2  EFE1  F03B         	goto	l1871
   821  0078C6                     u930:
   822  0078C6  EFFE  F03C         	goto	l65
   823  0078CA                     l1925:
   824  0078CA  5039               	movf	(_original+4)^0,w,c	;volatile
   825  0078CC  5C09               	subwf	rotate_r@val^0,w,c
   826  0078CE  500A               	movf	(rotate_r@val+1)^0,w,c
   827  0078D0  0A80               	xorlw	128
   828  0078D2  6E0B               	movwf	??_rotate_r^0,c
   829  0078D4  503A               	movf	(_original+5)^0,w,c	;volatile
   830  0078D6  0A80               	xorlw	128
   831  0078D8  580B               	subwfb	??_rotate_r^0,w,c
   832  0078DA  B0D8               	btfsc	status,0,c
   833  0078DC  EF72  F03C         	goto	u941
   834  0078E0  EF74  F03C         	goto	u940
   835  0078E4                     u941:
   836  0078E4  EFFE  F03C         	goto	l65
   837  0078E8                     u940:
   838  0078E8                     
   839                           ;newmain.c: 162:         int buf = original[2]-val;
   840  0078E8  5009               	movf	rotate_r@val^0,w,c
   841  0078EA  5C39               	subwf	(_original+4)^0,w,c	;volatile
   842  0078EC  6E0E               	movwf	rotate_r@buf_207^0,c
   843  0078EE  500A               	movf	(rotate_r@val+1)^0,w,c
   844  0078F0  583A               	subwfb	(_original+5)^0,w,c	;volatile
   845  0078F2  6E0F               	movwf	(rotate_r@buf_207+1)^0,c
   846                           
   847                           ;newmain.c: 163:         while(buf>0){
   848  0078F4  EFF1  F03C         	goto	l1981
   849  0078F8                     l1929:
   850                           
   851                           ;newmain.c: 164:             rgbarray tempc = rgb[14];
   852  0078F8  EE21  F054         	lfsr	2,_rgb+84	;volatile
   853  0078FC  EE10  F01C         	lfsr	1,rotate_r@tempc
   854  007900  0E05               	movlw	5
   855  007902                     u951:
   856  007902  CFDB FFE3          	movff	plusw2,plusw1
   857  007906  06E8               	decf	wreg,f,c
   858  007908  E2FC               	bc	u951
   859                           
   860                           ;newmain.c: 165:             rgbarray tempd = rgb[15];
   861  00790A  EE21  F05A         	lfsr	2,_rgb+90	;volatile
   862  00790E  EE10  F022         	lfsr	1,rotate_r@tempd
   863  007912  0E05               	movlw	5
   864  007914                     u961:
   865  007914  CFDB FFE3          	movff	plusw2,plusw1
   866  007918  06E8               	decf	wreg,f,c
   867  00791A  E2FC               	bc	u961
   868  00791C                     
   869                           ;newmain.c: 166:             rgb[14].r = rgb[10].r;rgb[15].r = rgb[11].r;
   870  00791C  C13C  F154         	movff	_rgb+60,_rgb+84	;volatile
   871  007920  C13D  F155         	movff	_rgb+61,_rgb+85	;volatile
   872  007924  C142  F15A         	movff	_rgb+66,_rgb+90	;volatile
   873  007928  C143  F15B         	movff	_rgb+67,_rgb+91	;volatile
   874  00792C                     
   875                           ;newmain.c: 167:             rgb[14].g = rgb[10].g;rgb[15].g = rgb[11].g;
   876  00792C  C13E  F156         	movff	_rgb+62,_rgb+86	;volatile
   877  007930  C13F  F157         	movff	_rgb+63,_rgb+87	;volatile
   878  007934  C144  F15C         	movff	_rgb+68,_rgb+92	;volatile
   879  007938  C145  F15D         	movff	_rgb+69,_rgb+93	;volatile
   880  00793C                     
   881                           ;newmain.c: 168:             rgb[14].b = rgb[10].b;rgb[15].b = rgb[11].b;
   882  00793C  C140  F158         	movff	_rgb+64,_rgb+88	;volatile
   883  007940  C141  F159         	movff	_rgb+65,_rgb+89	;volatile
   884  007944  C146  F15E         	movff	_rgb+70,_rgb+94	;volatile
   885  007948  C147  F15F         	movff	_rgb+71,_rgb+95	;volatile
   886  00794C                     
   887                           ;newmain.c: 169:             rgb[10].r = rgb[6].r;rgb[11].r = rgb[7].r;
   888  00794C  C124  F13C         	movff	_rgb+36,_rgb+60	;volatile
   889  007950  C125  F13D         	movff	_rgb+37,_rgb+61	;volatile
   890  007954  C12A  F142         	movff	_rgb+42,_rgb+66	;volatile
   891  007958  C12B  F143         	movff	_rgb+43,_rgb+67	;volatile
   892  00795C                     
   893                           ;newmain.c: 170:             rgb[10].g = rgb[6].g;rgb[11].g = rgb[7].g;
   894  00795C  C126  F13E         	movff	_rgb+38,_rgb+62	;volatile
   895  007960  C127  F13F         	movff	_rgb+39,_rgb+63	;volatile
   896  007964  C12C  F144         	movff	_rgb+44,_rgb+68	;volatile
   897  007968  C12D  F145         	movff	_rgb+45,_rgb+69	;volatile
   898  00796C                     
   899                           ;newmain.c: 171:             rgb[10].b = rgb[6].b;rgb[11].b = rgb[7].b;
   900  00796C  C128  F140         	movff	_rgb+40,_rgb+64	;volatile
   901  007970  C129  F141         	movff	_rgb+41,_rgb+65	;volatile
   902  007974  C12E  F146         	movff	_rgb+46,_rgb+70	;volatile
   903  007978  C12F  F147         	movff	_rgb+47,_rgb+71	;volatile
   904  00797C                     
   905                           ;newmain.c: 172:             rgb[6].r = rgb[2].r;rgb[7].r = rgb[3].r;
   906  00797C  C10C  F124         	movff	_rgb+12,_rgb+36	;volatile
   907  007980  C10D  F125         	movff	_rgb+13,_rgb+37	;volatile
   908  007984  C112  F12A         	movff	_rgb+18,_rgb+42	;volatile
   909  007988  C113  F12B         	movff	_rgb+19,_rgb+43	;volatile
   910  00798C                     
   911                           ;newmain.c: 173:             rgb[6].g = rgb[2].g;rgb[7].g = rgb[3].g;
   912  00798C  C10E  F126         	movff	_rgb+14,_rgb+38	;volatile
   913  007990  C10F  F127         	movff	_rgb+15,_rgb+39	;volatile
   914  007994  C114  F12C         	movff	_rgb+20,_rgb+44	;volatile
   915  007998  C115  F12D         	movff	_rgb+21,_rgb+45	;volatile
   916  00799C                     
   917                           ;newmain.c: 174:             rgb[6].b = rgb[2].b;rgb[7].b = rgb[3].b;
   918  00799C  C110  F128         	movff	_rgb+16,_rgb+40	;volatile
   919  0079A0  C111  F129         	movff	_rgb+17,_rgb+41	;volatile
   920  0079A4  C116  F12E         	movff	_rgb+22,_rgb+46	;volatile
   921  0079A8  C117  F12F         	movff	_rgb+23,_rgb+47	;volatile
   922  0079AC                     
   923                           ;newmain.c: 175:             rgb[2].r = tempc.r;rgb[3].r = tempd.r;
   924  0079AC  C01C  F10C         	movff	rotate_r@tempc,_rgb+12	;volatile
   925  0079B0  C01D  F10D         	movff	rotate_r@tempc+1,_rgb+13	;volatile
   926  0079B4  C022  F112         	movff	rotate_r@tempd,_rgb+18	;volatile
   927  0079B8  C023  F113         	movff	rotate_r@tempd+1,_rgb+19	;volatile
   928  0079BC                     
   929                           ;newmain.c: 176:             rgb[2].g = tempc.g;rgb[3].g = tempd.g;
   930  0079BC  C01E  F10E         	movff	rotate_r@tempc+2,_rgb+14	;volatile
   931  0079C0  C01F  F10F         	movff	rotate_r@tempc+3,_rgb+15	;volatile
   932  0079C4  C024  F114         	movff	rotate_r@tempd+2,_rgb+20	;volatile
   933  0079C8  C025  F115         	movff	rotate_r@tempd+3,_rgb+21	;volatile
   934  0079CC                     
   935                           ;newmain.c: 177:             rgb[2].b = tempc.b;rgb[3].b = tempd.b;
   936  0079CC  C020  F110         	movff	rotate_r@tempc+4,_rgb+16	;volatile
   937  0079D0  C021  F111         	movff	rotate_r@tempc+5,_rgb+17	;volatile
   938  0079D4  C026  F116         	movff	rotate_r@tempd+4,_rgb+22	;volatile
   939  0079D8  C027  F117         	movff	rotate_r@tempd+5,_rgb+23	;volatile
   940  0079DC                     
   941                           ;newmain.c: 178:             buf--;
   942  0079DC  060E               	decf	rotate_r@buf_207^0,f,c
   943  0079DE  A0D8               	btfss	status,0,c
   944  0079E0  060F               	decf	(rotate_r@buf_207+1)^0,f,c
   945  0079E2                     l1981:
   946                           
   947                           ;newmain.c: 163:         while(buf>0){
   948  0079E2  BE0F               	btfsc	(rotate_r@buf_207+1)^0,7,c
   949  0079E4  EFFE  F03C         	goto	u970
   950  0079E8  500F               	movf	(rotate_r@buf_207+1)^0,w,c
   951  0079EA  E106               	bnz	u971
   952  0079EC  040E               	decf	rotate_r@buf_207^0,w,c
   953  0079EE  B0D8               	btfsc	status,0,c
   954  0079F0  EFFC  F03C         	goto	u971
   955  0079F4  EFFE  F03C         	goto	u970
   956  0079F8                     u971:
   957  0079F8  EF7C  F03C         	goto	l1929
   958  0079FC                     u970:
   959  0079FC                     l65:
   960  0079FC  0012               	return		;funcret
   961  0079FE                     __end_of_rotate_r:
   962                           	opt callstack 0
   963                           
   964 ;; *************** function _rotate_l *****************
   965 ;; Defined at:
   966 ;;		line 183 in file "newmain.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  val             2    8[COMRAM] int 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  tempd           6   33[COMRAM] struct RGB
   971 ;;  tempc           6   27[COMRAM] struct RGB
   972 ;;  tempb           6   21[COMRAM] struct RGB
   973 ;;  tempa           6   15[COMRAM] struct RGB
   974 ;;  buf             2   13[COMRAM] int 
   975 ;;  buf             2   11[COMRAM] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   985 ;;      Params:         2       0       0       0       0       0       0
   986 ;;      Locals:        28       0       0       0       0       0       0
   987 ;;      Temps:          1       0       0       0       0       0       0
   988 ;;      Totals:        31       0       0       0       0       0       0
   989 ;;Total ram usage:       31 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_main
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           	psect	text2
   999  0074E2                     __ptext2:
  1000                           	opt callstack 0
  1001  0074E2                     _rotate_l:
  1002                           	opt callstack 30
  1003  0074E2                     
  1004                           ;newmain.c: 185:     if(val > 3){
  1005  0074E2  BE0A               	btfsc	(rotate_l@val+1)^0,7,c
  1006  0074E4  EF7D  F03A         	goto	u981
  1007  0074E8  500A               	movf	(rotate_l@val+1)^0,w,c
  1008  0074EA  E109               	bnz	u980
  1009  0074EC  0E04               	movlw	4
  1010  0074EE  5C09               	subwf	rotate_l@val^0,w,c
  1011  0074F0  A0D8               	btfss	status,0,c
  1012  0074F2  EF7D  F03A         	goto	u981
  1013  0074F6  EF7F  F03A         	goto	u980
  1014  0074FA                     u981:
  1015  0074FA  EF83  F03A         	goto	l1987
  1016  0074FE                     u980:
  1017  0074FE                     
  1018                           ;newmain.c: 186:         val = 3;
  1019  0074FE  0E00               	movlw	0
  1020  007500  6E0A               	movwf	(rotate_l@val+1)^0,c
  1021  007502  0E03               	movlw	3
  1022  007504  6E09               	movwf	rotate_l@val^0,c
  1023  007506                     l1987:
  1024                           
  1025                           ;newmain.c: 188:     if(val>original[3]){
  1026  007506  5009               	movf	rotate_l@val^0,w,c
  1027  007508  5C3B               	subwf	(_original+6)^0,w,c	;volatile
  1028  00750A  503C               	movf	(_original+7)^0,w,c	;volatile
  1029  00750C  0A80               	xorlw	128
  1030  00750E  6E0B               	movwf	??_rotate_l^0,c
  1031  007510  500A               	movf	(rotate_l@val+1)^0,w,c
  1032  007512  0A80               	xorlw	128
  1033  007514  580B               	subwfb	??_rotate_l^0,w,c
  1034  007516  B0D8               	btfsc	status,0,c
  1035  007518  EF90  F03A         	goto	u991
  1036  00751C  EF92  F03A         	goto	u990
  1037  007520                     u991:
  1038  007520  EF1E  F03B         	goto	l2045
  1039  007524                     u990:
  1040  007524                     
  1041                           ;newmain.c: 189:         int buf = val-original[3];
  1042  007524  503B               	movf	(_original+6)^0,w,c	;volatile
  1043  007526  5C09               	subwf	rotate_l@val^0,w,c
  1044  007528  6E0C               	movwf	rotate_l@buf^0,c
  1045  00752A  503C               	movf	(_original+7)^0,w,c	;volatile
  1046  00752C  580A               	subwfb	(rotate_l@val+1)^0,w,c
  1047  00752E  6E0D               	movwf	(rotate_l@buf+1)^0,c
  1048                           
  1049                           ;newmain.c: 190:         while(buf>0){
  1050  007530  EF0F  F03B         	goto	l2043
  1051  007534                     l1991:
  1052                           
  1053                           ;newmain.c: 191:             rgbarray tempa = rgb[0];
  1054  007534  EE21  F000         	lfsr	2,_rgb	;volatile
  1055  007538  EE10  F010         	lfsr	1,rotate_l@tempa
  1056  00753C  0E05               	movlw	5
  1057  00753E                     u1001:
  1058  00753E  CFDB FFE3          	movff	plusw2,plusw1
  1059  007542  06E8               	decf	wreg,f,c
  1060  007544  E2FC               	bc	u1001
  1061                           
  1062                           ;newmain.c: 192:             rgbarray tempb = rgb[1];
  1063  007546  EE21  F006         	lfsr	2,_rgb+6	;volatile
  1064  00754A  EE10  F016         	lfsr	1,rotate_l@tempb
  1065  00754E  0E05               	movlw	5
  1066  007550                     u1011:
  1067  007550  CFDB FFE3          	movff	plusw2,plusw1
  1068  007554  06E8               	decf	wreg,f,c
  1069  007556  E2FC               	bc	u1011
  1070  007558                     
  1071                           ;newmain.c: 193:             rgb[0].r = rgb[4].r;rgb[1].r = rgb[5].r;
  1072  007558  C118  F100         	movff	_rgb+24,_rgb	;volatile
  1073  00755C  C119  F101         	movff	_rgb+25,_rgb+1	;volatile
  1074  007560  C11E  F106         	movff	_rgb+30,_rgb+6	;volatile
  1075  007564  C11F  F107         	movff	_rgb+31,_rgb+7	;volatile
  1076  007568                     
  1077                           ;newmain.c: 194:             rgb[0].g = rgb[4].g;rgb[1].g = rgb[5].g;
  1078  007568  C11A  F102         	movff	_rgb+26,_rgb+2	;volatile
  1079  00756C  C11B  F103         	movff	_rgb+27,_rgb+3	;volatile
  1080  007570  C120  F108         	movff	_rgb+32,_rgb+8	;volatile
  1081  007574  C121  F109         	movff	_rgb+33,_rgb+9	;volatile
  1082  007578                     
  1083                           ;newmain.c: 195:             rgb[0].b = rgb[4].b;rgb[1].b = rgb[5].b;
  1084  007578  C11C  F104         	movff	_rgb+28,_rgb+4	;volatile
  1085  00757C  C11D  F105         	movff	_rgb+29,_rgb+5	;volatile
  1086  007580  C122  F10A         	movff	_rgb+34,_rgb+10	;volatile
  1087  007584  C123  F10B         	movff	_rgb+35,_rgb+11	;volatile
  1088  007588                     
  1089                           ;newmain.c: 196:             rgb[4].r = rgb[8].r;rgb[5].r = rgb[9].r;
  1090  007588  C130  F118         	movff	_rgb+48,_rgb+24	;volatile
  1091  00758C  C131  F119         	movff	_rgb+49,_rgb+25	;volatile
  1092  007590  C136  F11E         	movff	_rgb+54,_rgb+30	;volatile
  1093  007594  C137  F11F         	movff	_rgb+55,_rgb+31	;volatile
  1094  007598                     
  1095                           ;newmain.c: 197:             rgb[4].g = rgb[8].g;rgb[5].g = rgb[9].g;
  1096  007598  C132  F11A         	movff	_rgb+50,_rgb+26	;volatile
  1097  00759C  C133  F11B         	movff	_rgb+51,_rgb+27	;volatile
  1098  0075A0  C138  F120         	movff	_rgb+56,_rgb+32	;volatile
  1099  0075A4  C139  F121         	movff	_rgb+57,_rgb+33	;volatile
  1100  0075A8                     
  1101                           ;newmain.c: 198:             rgb[4].b = rgb[8].b;rgb[5].b = rgb[9].b;
  1102  0075A8  C134  F11C         	movff	_rgb+52,_rgb+28	;volatile
  1103  0075AC  C135  F11D         	movff	_rgb+53,_rgb+29	;volatile
  1104  0075B0  C13A  F122         	movff	_rgb+58,_rgb+34	;volatile
  1105  0075B4  C13B  F123         	movff	_rgb+59,_rgb+35	;volatile
  1106  0075B8                     
  1107                           ;newmain.c: 199:             rgb[8].r = rgb[12].r;rgb[9].r = rgb[13].r;
  1108  0075B8  C148  F130         	movff	_rgb+72,_rgb+48	;volatile
  1109  0075BC  C149  F131         	movff	_rgb+73,_rgb+49	;volatile
  1110  0075C0  C14E  F136         	movff	_rgb+78,_rgb+54	;volatile
  1111  0075C4  C14F  F137         	movff	_rgb+79,_rgb+55	;volatile
  1112  0075C8                     
  1113                           ;newmain.c: 200:             rgb[8].g = rgb[12].g;rgb[9].g = rgb[13].g;
  1114  0075C8  C14A  F132         	movff	_rgb+74,_rgb+50	;volatile
  1115  0075CC  C14B  F133         	movff	_rgb+75,_rgb+51	;volatile
  1116  0075D0  C150  F138         	movff	_rgb+80,_rgb+56	;volatile
  1117  0075D4  C151  F139         	movff	_rgb+81,_rgb+57	;volatile
  1118  0075D8                     
  1119                           ;newmain.c: 201:             rgb[8].b = rgb[12].b;rgb[9].b = rgb[13].b;
  1120  0075D8  C14C  F134         	movff	_rgb+76,_rgb+52	;volatile
  1121  0075DC  C14D  F135         	movff	_rgb+77,_rgb+53	;volatile
  1122  0075E0  C152  F13A         	movff	_rgb+82,_rgb+58	;volatile
  1123  0075E4  C153  F13B         	movff	_rgb+83,_rgb+59	;volatile
  1124  0075E8                     
  1125                           ;newmain.c: 202:             rgb[12].r = tempa.r;rgb[13].r = tempb.r;
  1126  0075E8  C010  F148         	movff	rotate_l@tempa,_rgb+72	;volatile
  1127  0075EC  C011  F149         	movff	rotate_l@tempa+1,_rgb+73	;volatile
  1128  0075F0  C016  F14E         	movff	rotate_l@tempb,_rgb+78	;volatile
  1129  0075F4  C017  F14F         	movff	rotate_l@tempb+1,_rgb+79	;volatile
  1130  0075F8                     
  1131                           ;newmain.c: 203:             rgb[12].g = tempa.g;rgb[13].g = tempb.g;
  1132  0075F8  C012  F14A         	movff	rotate_l@tempa+2,_rgb+74	;volatile
  1133  0075FC  C013  F14B         	movff	rotate_l@tempa+3,_rgb+75	;volatile
  1134  007600  C018  F150         	movff	rotate_l@tempb+2,_rgb+80	;volatile
  1135  007604  C019  F151         	movff	rotate_l@tempb+3,_rgb+81	;volatile
  1136  007608                     
  1137                           ;newmain.c: 204:             rgb[12].b = tempa.b;rgb[13].b = tempb.b;
  1138  007608  C014  F14C         	movff	rotate_l@tempa+4,_rgb+76	;volatile
  1139  00760C  C015  F14D         	movff	rotate_l@tempa+5,_rgb+77	;volatile
  1140  007610  C01A  F152         	movff	rotate_l@tempb+4,_rgb+82	;volatile
  1141  007614  C01B  F153         	movff	rotate_l@tempb+5,_rgb+83	;volatile
  1142  007618                     
  1143                           ;newmain.c: 205:             buf--;
  1144  007618  060C               	decf	rotate_l@buf^0,f,c
  1145  00761A  A0D8               	btfss	status,0,c
  1146  00761C  060D               	decf	(rotate_l@buf+1)^0,f,c
  1147  00761E                     l2043:
  1148                           
  1149                           ;newmain.c: 190:         while(buf>0){
  1150  00761E  BE0D               	btfsc	(rotate_l@buf+1)^0,7,c
  1151  007620  EF1C  F03B         	goto	u1020
  1152  007624  500D               	movf	(rotate_l@buf+1)^0,w,c
  1153  007626  E106               	bnz	u1021
  1154  007628  040C               	decf	rotate_l@buf^0,w,c
  1155  00762A  B0D8               	btfsc	status,0,c
  1156  00762C  EF1A  F03B         	goto	u1021
  1157  007630  EF1C  F03B         	goto	u1020
  1158  007634                     u1021:
  1159  007634  EF9A  F03A         	goto	l1991
  1160  007638                     u1020:
  1161  007638  EFB7  F03B         	goto	l78
  1162  00763C                     l2045:
  1163  00763C  503B               	movf	(_original+6)^0,w,c	;volatile
  1164  00763E  5C09               	subwf	rotate_l@val^0,w,c
  1165  007640  500A               	movf	(rotate_l@val+1)^0,w,c
  1166  007642  0A80               	xorlw	128
  1167  007644  6E0B               	movwf	??_rotate_l^0,c
  1168  007646  503C               	movf	(_original+7)^0,w,c	;volatile
  1169  007648  0A80               	xorlw	128
  1170  00764A  580B               	subwfb	??_rotate_l^0,w,c
  1171  00764C  B0D8               	btfsc	status,0,c
  1172  00764E  EF2B  F03B         	goto	u1031
  1173  007652  EF2D  F03B         	goto	u1030
  1174  007656                     u1031:
  1175  007656  EFB7  F03B         	goto	l78
  1176  00765A                     u1030:
  1177  00765A                     
  1178                           ;newmain.c: 209:         int buf = original[3]-val;
  1179  00765A  5009               	movf	rotate_l@val^0,w,c
  1180  00765C  5C3B               	subwf	(_original+6)^0,w,c	;volatile
  1181  00765E  6E0E               	movwf	rotate_l@buf_227^0,c
  1182  007660  500A               	movf	(rotate_l@val+1)^0,w,c
  1183  007662  583C               	subwfb	(_original+7)^0,w,c	;volatile
  1184  007664  6E0F               	movwf	(rotate_l@buf_227+1)^0,c
  1185                           
  1186                           ;newmain.c: 210:         while(buf>0){
  1187  007666  EFAA  F03B         	goto	l2101
  1188  00766A                     l2049:
  1189                           
  1190                           ;newmain.c: 211:             rgbarray tempc = rgb[12];
  1191  00766A  EE21  F048         	lfsr	2,_rgb+72	;volatile
  1192  00766E  EE10  F01C         	lfsr	1,rotate_l@tempc
  1193  007672  0E05               	movlw	5
  1194  007674                     u1041:
  1195  007674  CFDB FFE3          	movff	plusw2,plusw1
  1196  007678  06E8               	decf	wreg,f,c
  1197  00767A  E2FC               	bc	u1041
  1198                           
  1199                           ;newmain.c: 212:             rgbarray tempd = rgb[13];
  1200  00767C  EE21  F04E         	lfsr	2,_rgb+78	;volatile
  1201  007680  EE10  F022         	lfsr	1,rotate_l@tempd
  1202  007684  0E05               	movlw	5
  1203  007686                     u1051:
  1204  007686  CFDB FFE3          	movff	plusw2,plusw1
  1205  00768A  06E8               	decf	wreg,f,c
  1206  00768C  E2FC               	bc	u1051
  1207  00768E                     
  1208                           ;newmain.c: 213:             rgb[12].r = rgb[8].r;rgb[13].r = rgb[9].r;
  1209  00768E  C130  F148         	movff	_rgb+48,_rgb+72	;volatile
  1210  007692  C131  F149         	movff	_rgb+49,_rgb+73	;volatile
  1211  007696  C136  F14E         	movff	_rgb+54,_rgb+78	;volatile
  1212  00769A  C137  F14F         	movff	_rgb+55,_rgb+79	;volatile
  1213  00769E                     
  1214                           ;newmain.c: 214:             rgb[12].g = rgb[8].g;rgb[13].g = rgb[9].g;
  1215  00769E  C132  F14A         	movff	_rgb+50,_rgb+74	;volatile
  1216  0076A2  C133  F14B         	movff	_rgb+51,_rgb+75	;volatile
  1217  0076A6  C138  F150         	movff	_rgb+56,_rgb+80	;volatile
  1218  0076AA  C139  F151         	movff	_rgb+57,_rgb+81	;volatile
  1219  0076AE                     
  1220                           ;newmain.c: 215:             rgb[12].b = rgb[8].b;rgb[13].b = rgb[9].b;
  1221  0076AE  C134  F14C         	movff	_rgb+52,_rgb+76	;volatile
  1222  0076B2  C135  F14D         	movff	_rgb+53,_rgb+77	;volatile
  1223  0076B6  C13A  F152         	movff	_rgb+58,_rgb+82	;volatile
  1224  0076BA  C13B  F153         	movff	_rgb+59,_rgb+83	;volatile
  1225  0076BE                     
  1226                           ;newmain.c: 216:             rgb[8].r = rgb[4].r;rgb[9].r = rgb[5].r;
  1227  0076BE  C118  F130         	movff	_rgb+24,_rgb+48	;volatile
  1228  0076C2  C119  F131         	movff	_rgb+25,_rgb+49	;volatile
  1229  0076C6  C11E  F136         	movff	_rgb+30,_rgb+54	;volatile
  1230  0076CA  C11F  F137         	movff	_rgb+31,_rgb+55	;volatile
  1231  0076CE                     
  1232                           ;newmain.c: 217:             rgb[8].g = rgb[4].g;rgb[9].g = rgb[5].g;
  1233  0076CE  C11A  F132         	movff	_rgb+26,_rgb+50	;volatile
  1234  0076D2  C11B  F133         	movff	_rgb+27,_rgb+51	;volatile
  1235  0076D6  C120  F138         	movff	_rgb+32,_rgb+56	;volatile
  1236  0076DA  C121  F139         	movff	_rgb+33,_rgb+57	;volatile
  1237  0076DE                     
  1238                           ;newmain.c: 218:             rgb[8].b = rgb[4].b;rgb[9].b = rgb[5].b;
  1239  0076DE  C11C  F134         	movff	_rgb+28,_rgb+52	;volatile
  1240  0076E2  C11D  F135         	movff	_rgb+29,_rgb+53	;volatile
  1241  0076E6  C122  F13A         	movff	_rgb+34,_rgb+58	;volatile
  1242  0076EA  C123  F13B         	movff	_rgb+35,_rgb+59	;volatile
  1243  0076EE                     
  1244                           ;newmain.c: 219:             rgb[4].r = rgb[0].r;rgb[5].r = rgb[1].r;
  1245  0076EE  C100  F118         	movff	_rgb,_rgb+24	;volatile
  1246  0076F2  C101  F119         	movff	_rgb+1,_rgb+25	;volatile
  1247  0076F6  C106  F11E         	movff	_rgb+6,_rgb+30	;volatile
  1248  0076FA  C107  F11F         	movff	_rgb+7,_rgb+31	;volatile
  1249  0076FE                     
  1250                           ;newmain.c: 220:             rgb[4].g = rgb[0].g;rgb[5].g = rgb[1].g;
  1251  0076FE  C102  F11A         	movff	_rgb+2,_rgb+26	;volatile
  1252  007702  C103  F11B         	movff	_rgb+3,_rgb+27	;volatile
  1253  007706  C108  F120         	movff	_rgb+8,_rgb+32	;volatile
  1254  00770A  C109  F121         	movff	_rgb+9,_rgb+33	;volatile
  1255  00770E                     
  1256                           ;newmain.c: 221:             rgb[4].b = rgb[0].b;rgb[5].b = rgb[1].b;
  1257  00770E  C104  F11C         	movff	_rgb+4,_rgb+28	;volatile
  1258  007712  C105  F11D         	movff	_rgb+5,_rgb+29	;volatile
  1259  007716  C10A  F122         	movff	_rgb+10,_rgb+34	;volatile
  1260  00771A  C10B  F123         	movff	_rgb+11,_rgb+35	;volatile
  1261  00771E                     
  1262                           ;newmain.c: 222:             rgb[0].r = tempc.r;rgb[1].r = tempd.r;
  1263  00771E  C01C  F100         	movff	rotate_l@tempc,_rgb	;volatile
  1264  007722  C01D  F101         	movff	rotate_l@tempc+1,_rgb+1	;volatile
  1265  007726  C022  F106         	movff	rotate_l@tempd,_rgb+6	;volatile
  1266  00772A  C023  F107         	movff	rotate_l@tempd+1,_rgb+7	;volatile
  1267  00772E                     
  1268                           ;newmain.c: 223:             rgb[0].g = tempc.g;rgb[1].g = tempd.g;
  1269  00772E  C01E  F102         	movff	rotate_l@tempc+2,_rgb+2	;volatile
  1270  007732  C01F  F103         	movff	rotate_l@tempc+3,_rgb+3	;volatile
  1271  007736  C024  F108         	movff	rotate_l@tempd+2,_rgb+8	;volatile
  1272  00773A  C025  F109         	movff	rotate_l@tempd+3,_rgb+9	;volatile
  1273  00773E                     
  1274                           ;newmain.c: 224:             rgb[0].b = tempc.b;rgb[1].b = tempd.b;
  1275  00773E  C020  F104         	movff	rotate_l@tempc+4,_rgb+4	;volatile
  1276  007742  C021  F105         	movff	rotate_l@tempc+5,_rgb+5	;volatile
  1277  007746  C026  F10A         	movff	rotate_l@tempd+4,_rgb+10	;volatile
  1278  00774A  C027  F10B         	movff	rotate_l@tempd+5,_rgb+11	;volatile
  1279  00774E                     
  1280                           ;newmain.c: 225:             buf--;
  1281  00774E  060E               	decf	rotate_l@buf_227^0,f,c
  1282  007750  A0D8               	btfss	status,0,c
  1283  007752  060F               	decf	(rotate_l@buf_227+1)^0,f,c
  1284  007754                     l2101:
  1285                           
  1286                           ;newmain.c: 210:         while(buf>0){
  1287  007754  BE0F               	btfsc	(rotate_l@buf_227+1)^0,7,c
  1288  007756  EFB7  F03B         	goto	u1060
  1289  00775A  500F               	movf	(rotate_l@buf_227+1)^0,w,c
  1290  00775C  E106               	bnz	u1061
  1291  00775E  040E               	decf	rotate_l@buf_227^0,w,c
  1292  007760  B0D8               	btfsc	status,0,c
  1293  007762  EFB5  F03B         	goto	u1061
  1294  007766  EFB7  F03B         	goto	u1060
  1295  00776A                     u1061:
  1296  00776A  EF35  F03B         	goto	l2049
  1297  00776E                     u1060:
  1298  00776E                     l78:
  1299  00776E  0012               	return		;funcret
  1300  007770                     __end_of_rotate_l:
  1301                           	opt callstack 0
  1302                           
  1303 ;; *************** function _initial *****************
  1304 ;; Defined at:
  1305 ;;		line 104 in file "newmain.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  i               2    6[COMRAM] int 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1319 ;;      Params:         0       0       0       0       0       0       0
  1320 ;;      Locals:         2       0       0       0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0
  1322 ;;      Totals:         2       0       0       0       0       0       0
  1323 ;;Total ram usage:        2 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    1
  1326 ;; This function calls:
  1327 ;;		___wmul
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text3
  1334  0079FE                     __ptext3:
  1335                           	opt callstack 0
  1336  0079FE                     _initial:
  1337                           	opt callstack 29
  1338  0079FE                     
  1339                           ;newmain.c: 105:     int i;;newmain.c: 106:     for(i = 0;i < 4;i++){
  1340  0079FE  0E00               	movlw	0
  1341  007A00  6E08               	movwf	(initial@i+1)^0,c
  1342  007A02  0E00               	movlw	0
  1343  007A04  6E07               	movwf	initial@i^0,c
  1344  007A06                     l1797:
  1345                           
  1346                           ;newmain.c: 107:         rgb[i].r = 0;
  1347  007A06  C007  F001         	movff	initial@i,___wmul@multiplier
  1348  007A0A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1349  007A0E  0E00               	movlw	0
  1350  007A10  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1351  007A12  0E06               	movlw	6
  1352  007A14  6E03               	movwf	___wmul@multiplicand^0,c
  1353  007A16  EC9A  F038         	call	___wmul	;wreg free
  1354  007A1A  0E00               	movlw	low _rgb
  1355  007A1C  2401               	addwf	?___wmul^0,w,c
  1356  007A1E  6ED9               	movwf	fsr2l,c
  1357  007A20  0E01               	movlw	high _rgb
  1358  007A22  2002               	addwfc	(?___wmul+1)^0,w,c
  1359  007A24  6EDA               	movwf	fsr2h,c
  1360  007A26  0E00               	movlw	0
  1361  007A28  6EDE               	movwf	postinc2,c
  1362  007A2A  0E00               	movlw	0
  1363  007A2C  6EDD               	movwf	postdec2,c
  1364                           
  1365                           ;newmain.c: 108:         rgb[i].g = 1;
  1366  007A2E  C007  F001         	movff	initial@i,___wmul@multiplier
  1367  007A32  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1368  007A36  0E00               	movlw	0
  1369  007A38  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1370  007A3A  0E06               	movlw	6
  1371  007A3C  6E03               	movwf	___wmul@multiplicand^0,c
  1372  007A3E  EC9A  F038         	call	___wmul	;wreg free
  1373  007A42  0E02               	movlw	low (_rgb+2)
  1374  007A44  2401               	addwf	?___wmul^0,w,c
  1375  007A46  6ED9               	movwf	fsr2l,c
  1376  007A48  0E01               	movlw	high (_rgb+2)
  1377  007A4A  2002               	addwfc	(?___wmul+1)^0,w,c
  1378  007A4C  6EDA               	movwf	fsr2h,c
  1379  007A4E  0E01               	movlw	1
  1380  007A50  6EDE               	movwf	postinc2,c
  1381  007A52  0E00               	movlw	0
  1382  007A54  6EDD               	movwf	postdec2,c
  1383                           
  1384                           ;newmain.c: 109:         rgb[i].b = 1;
  1385  007A56  C007  F001         	movff	initial@i,___wmul@multiplier
  1386  007A5A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1387  007A5E  0E00               	movlw	0
  1388  007A60  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1389  007A62  0E06               	movlw	6
  1390  007A64  6E03               	movwf	___wmul@multiplicand^0,c
  1391  007A66  EC9A  F038         	call	___wmul	;wreg free
  1392  007A6A  0E04               	movlw	low (_rgb+4)
  1393  007A6C  2401               	addwf	?___wmul^0,w,c
  1394  007A6E  6ED9               	movwf	fsr2l,c
  1395  007A70  0E01               	movlw	high (_rgb+4)
  1396  007A72  2002               	addwfc	(?___wmul+1)^0,w,c
  1397  007A74  6EDA               	movwf	fsr2h,c
  1398  007A76  0E01               	movlw	1
  1399  007A78  6EDE               	movwf	postinc2,c
  1400  007A7A  0E00               	movlw	0
  1401  007A7C  6EDD               	movwf	postdec2,c
  1402  007A7E                     
  1403                           ;newmain.c: 110:     }
  1404  007A7E  4A07               	infsnz	initial@i^0,f,c
  1405  007A80  2A08               	incf	(initial@i+1)^0,f,c
  1406  007A82  BE08               	btfsc	(initial@i+1)^0,7,c
  1407  007A84  EF4D  F03D         	goto	u831
  1408  007A88  5008               	movf	(initial@i+1)^0,w,c
  1409  007A8A  E109               	bnz	u830
  1410  007A8C  0E04               	movlw	4
  1411  007A8E  5C07               	subwf	initial@i^0,w,c
  1412  007A90  A0D8               	btfss	status,0,c
  1413  007A92  EF4D  F03D         	goto	u831
  1414  007A96  EF4F  F03D         	goto	u830
  1415  007A9A                     u831:
  1416  007A9A  EF03  F03D         	goto	l1797
  1417  007A9E                     u830:
  1418  007A9E                     
  1419                           ;newmain.c: 111:     for(i = 4;i < 8;i++){
  1420  007A9E  0E00               	movlw	0
  1421  007AA0  6E08               	movwf	(initial@i+1)^0,c
  1422  007AA2  0E04               	movlw	4
  1423  007AA4  6E07               	movwf	initial@i^0,c
  1424  007AA6                     l1809:
  1425                           
  1426                           ;newmain.c: 112:         rgb[i].r = 1;
  1427  007AA6  C007  F001         	movff	initial@i,___wmul@multiplier
  1428  007AAA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1429  007AAE  0E00               	movlw	0
  1430  007AB0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1431  007AB2  0E06               	movlw	6
  1432  007AB4  6E03               	movwf	___wmul@multiplicand^0,c
  1433  007AB6  EC9A  F038         	call	___wmul	;wreg free
  1434  007ABA  0E00               	movlw	low _rgb
  1435  007ABC  2401               	addwf	?___wmul^0,w,c
  1436  007ABE  6ED9               	movwf	fsr2l,c
  1437  007AC0  0E01               	movlw	high _rgb
  1438  007AC2  2002               	addwfc	(?___wmul+1)^0,w,c
  1439  007AC4  6EDA               	movwf	fsr2h,c
  1440  007AC6  0E01               	movlw	1
  1441  007AC8  6EDE               	movwf	postinc2,c
  1442  007ACA  0E00               	movlw	0
  1443  007ACC  6EDD               	movwf	postdec2,c
  1444                           
  1445                           ;newmain.c: 113:         rgb[i].g = 0;
  1446  007ACE  C007  F001         	movff	initial@i,___wmul@multiplier
  1447  007AD2  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1448  007AD6  0E00               	movlw	0
  1449  007AD8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1450  007ADA  0E06               	movlw	6
  1451  007ADC  6E03               	movwf	___wmul@multiplicand^0,c
  1452  007ADE  EC9A  F038         	call	___wmul	;wreg free
  1453  007AE2  0E02               	movlw	low (_rgb+2)
  1454  007AE4  2401               	addwf	?___wmul^0,w,c
  1455  007AE6  6ED9               	movwf	fsr2l,c
  1456  007AE8  0E01               	movlw	high (_rgb+2)
  1457  007AEA  2002               	addwfc	(?___wmul+1)^0,w,c
  1458  007AEC  6EDA               	movwf	fsr2h,c
  1459  007AEE  0E00               	movlw	0
  1460  007AF0  6EDE               	movwf	postinc2,c
  1461  007AF2  0E00               	movlw	0
  1462  007AF4  6EDD               	movwf	postdec2,c
  1463                           
  1464                           ;newmain.c: 114:         rgb[i].b = 1;
  1465  007AF6  C007  F001         	movff	initial@i,___wmul@multiplier
  1466  007AFA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1467  007AFE  0E00               	movlw	0
  1468  007B00  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1469  007B02  0E06               	movlw	6
  1470  007B04  6E03               	movwf	___wmul@multiplicand^0,c
  1471  007B06  EC9A  F038         	call	___wmul	;wreg free
  1472  007B0A  0E04               	movlw	low (_rgb+4)
  1473  007B0C  2401               	addwf	?___wmul^0,w,c
  1474  007B0E  6ED9               	movwf	fsr2l,c
  1475  007B10  0E01               	movlw	high (_rgb+4)
  1476  007B12  2002               	addwfc	(?___wmul+1)^0,w,c
  1477  007B14  6EDA               	movwf	fsr2h,c
  1478  007B16  0E01               	movlw	1
  1479  007B18  6EDE               	movwf	postinc2,c
  1480  007B1A  0E00               	movlw	0
  1481  007B1C  6EDD               	movwf	postdec2,c
  1482  007B1E                     
  1483                           ;newmain.c: 115:     }
  1484  007B1E  4A07               	infsnz	initial@i^0,f,c
  1485  007B20  2A08               	incf	(initial@i+1)^0,f,c
  1486  007B22  BE08               	btfsc	(initial@i+1)^0,7,c
  1487  007B24  EF9D  F03D         	goto	u841
  1488  007B28  5008               	movf	(initial@i+1)^0,w,c
  1489  007B2A  E109               	bnz	u840
  1490  007B2C  0E08               	movlw	8
  1491  007B2E  5C07               	subwf	initial@i^0,w,c
  1492  007B30  A0D8               	btfss	status,0,c
  1493  007B32  EF9D  F03D         	goto	u841
  1494  007B36  EF9F  F03D         	goto	u840
  1495  007B3A                     u841:
  1496  007B3A  EF53  F03D         	goto	l1809
  1497  007B3E                     u840:
  1498  007B3E                     
  1499                           ;newmain.c: 116:     for(i = 8;i < 12;i++){
  1500  007B3E  0E00               	movlw	0
  1501  007B40  6E08               	movwf	(initial@i+1)^0,c
  1502  007B42  0E08               	movlw	8
  1503  007B44  6E07               	movwf	initial@i^0,c
  1504  007B46                     l1821:
  1505                           
  1506                           ;newmain.c: 117:         rgb[i].r = 1;
  1507  007B46  C007  F001         	movff	initial@i,___wmul@multiplier
  1508  007B4A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1509  007B4E  0E00               	movlw	0
  1510  007B50  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1511  007B52  0E06               	movlw	6
  1512  007B54  6E03               	movwf	___wmul@multiplicand^0,c
  1513  007B56  EC9A  F038         	call	___wmul	;wreg free
  1514  007B5A  0E00               	movlw	low _rgb
  1515  007B5C  2401               	addwf	?___wmul^0,w,c
  1516  007B5E  6ED9               	movwf	fsr2l,c
  1517  007B60  0E01               	movlw	high _rgb
  1518  007B62  2002               	addwfc	(?___wmul+1)^0,w,c
  1519  007B64  6EDA               	movwf	fsr2h,c
  1520  007B66  0E01               	movlw	1
  1521  007B68  6EDE               	movwf	postinc2,c
  1522  007B6A  0E00               	movlw	0
  1523  007B6C  6EDD               	movwf	postdec2,c
  1524                           
  1525                           ;newmain.c: 118:         rgb[i].g = 1;
  1526  007B6E  C007  F001         	movff	initial@i,___wmul@multiplier
  1527  007B72  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1528  007B76  0E00               	movlw	0
  1529  007B78  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1530  007B7A  0E06               	movlw	6
  1531  007B7C  6E03               	movwf	___wmul@multiplicand^0,c
  1532  007B7E  EC9A  F038         	call	___wmul	;wreg free
  1533  007B82  0E02               	movlw	low (_rgb+2)
  1534  007B84  2401               	addwf	?___wmul^0,w,c
  1535  007B86  6ED9               	movwf	fsr2l,c
  1536  007B88  0E01               	movlw	high (_rgb+2)
  1537  007B8A  2002               	addwfc	(?___wmul+1)^0,w,c
  1538  007B8C  6EDA               	movwf	fsr2h,c
  1539  007B8E  0E01               	movlw	1
  1540  007B90  6EDE               	movwf	postinc2,c
  1541  007B92  0E00               	movlw	0
  1542  007B94  6EDD               	movwf	postdec2,c
  1543                           
  1544                           ;newmain.c: 119:         rgb[i].b = 0;
  1545  007B96  C007  F001         	movff	initial@i,___wmul@multiplier
  1546  007B9A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1547  007B9E  0E00               	movlw	0
  1548  007BA0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1549  007BA2  0E06               	movlw	6
  1550  007BA4  6E03               	movwf	___wmul@multiplicand^0,c
  1551  007BA6  EC9A  F038         	call	___wmul	;wreg free
  1552  007BAA  0E04               	movlw	low (_rgb+4)
  1553  007BAC  2401               	addwf	?___wmul^0,w,c
  1554  007BAE  6ED9               	movwf	fsr2l,c
  1555  007BB0  0E01               	movlw	high (_rgb+4)
  1556  007BB2  2002               	addwfc	(?___wmul+1)^0,w,c
  1557  007BB4  6EDA               	movwf	fsr2h,c
  1558  007BB6  0E00               	movlw	0
  1559  007BB8  6EDE               	movwf	postinc2,c
  1560  007BBA  0E00               	movlw	0
  1561  007BBC  6EDD               	movwf	postdec2,c
  1562  007BBE                     
  1563                           ;newmain.c: 120:     }
  1564  007BBE  4A07               	infsnz	initial@i^0,f,c
  1565  007BC0  2A08               	incf	(initial@i+1)^0,f,c
  1566  007BC2  BE08               	btfsc	(initial@i+1)^0,7,c
  1567  007BC4  EFED  F03D         	goto	u851
  1568  007BC8  5008               	movf	(initial@i+1)^0,w,c
  1569  007BCA  E109               	bnz	u850
  1570  007BCC  0E0C               	movlw	12
  1571  007BCE  5C07               	subwf	initial@i^0,w,c
  1572  007BD0  A0D8               	btfss	status,0,c
  1573  007BD2  EFED  F03D         	goto	u851
  1574  007BD6  EFEF  F03D         	goto	u850
  1575  007BDA                     u851:
  1576  007BDA  EFA3  F03D         	goto	l1821
  1577  007BDE                     u850:
  1578  007BDE                     
  1579                           ;newmain.c: 121:     for(i = 12;i < 16;i++){
  1580  007BDE  0E00               	movlw	0
  1581  007BE0  6E08               	movwf	(initial@i+1)^0,c
  1582  007BE2  0E0C               	movlw	12
  1583  007BE4  6E07               	movwf	initial@i^0,c
  1584  007BE6                     l1833:
  1585                           
  1586                           ;newmain.c: 122:         rgb[i].r = 0;
  1587  007BE6  C007  F001         	movff	initial@i,___wmul@multiplier
  1588  007BEA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1589  007BEE  0E00               	movlw	0
  1590  007BF0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1591  007BF2  0E06               	movlw	6
  1592  007BF4  6E03               	movwf	___wmul@multiplicand^0,c
  1593  007BF6  EC9A  F038         	call	___wmul	;wreg free
  1594  007BFA  0E00               	movlw	low _rgb
  1595  007BFC  2401               	addwf	?___wmul^0,w,c
  1596  007BFE  6ED9               	movwf	fsr2l,c
  1597  007C00  0E01               	movlw	high _rgb
  1598  007C02  2002               	addwfc	(?___wmul+1)^0,w,c
  1599  007C04  6EDA               	movwf	fsr2h,c
  1600  007C06  0E00               	movlw	0
  1601  007C08  6EDE               	movwf	postinc2,c
  1602  007C0A  0E00               	movlw	0
  1603  007C0C  6EDD               	movwf	postdec2,c
  1604                           
  1605                           ;newmain.c: 123:         rgb[i].g = 1;
  1606  007C0E  C007  F001         	movff	initial@i,___wmul@multiplier
  1607  007C12  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1608  007C16  0E00               	movlw	0
  1609  007C18  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1610  007C1A  0E06               	movlw	6
  1611  007C1C  6E03               	movwf	___wmul@multiplicand^0,c
  1612  007C1E  EC9A  F038         	call	___wmul	;wreg free
  1613  007C22  0E02               	movlw	low (_rgb+2)
  1614  007C24  2401               	addwf	?___wmul^0,w,c
  1615  007C26  6ED9               	movwf	fsr2l,c
  1616  007C28  0E01               	movlw	high (_rgb+2)
  1617  007C2A  2002               	addwfc	(?___wmul+1)^0,w,c
  1618  007C2C  6EDA               	movwf	fsr2h,c
  1619  007C2E  0E01               	movlw	1
  1620  007C30  6EDE               	movwf	postinc2,c
  1621  007C32  0E00               	movlw	0
  1622  007C34  6EDD               	movwf	postdec2,c
  1623                           
  1624                           ;newmain.c: 124:         rgb[i].b = 0;
  1625  007C36  C007  F001         	movff	initial@i,___wmul@multiplier
  1626  007C3A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1627  007C3E  0E00               	movlw	0
  1628  007C40  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1629  007C42  0E06               	movlw	6
  1630  007C44  6E03               	movwf	___wmul@multiplicand^0,c
  1631  007C46  EC9A  F038         	call	___wmul	;wreg free
  1632  007C4A  0E04               	movlw	low (_rgb+4)
  1633  007C4C  2401               	addwf	?___wmul^0,w,c
  1634  007C4E  6ED9               	movwf	fsr2l,c
  1635  007C50  0E01               	movlw	high (_rgb+4)
  1636  007C52  2002               	addwfc	(?___wmul+1)^0,w,c
  1637  007C54  6EDA               	movwf	fsr2h,c
  1638  007C56  0E00               	movlw	0
  1639  007C58  6EDE               	movwf	postinc2,c
  1640  007C5A  0E00               	movlw	0
  1641  007C5C  6EDD               	movwf	postdec2,c
  1642  007C5E                     
  1643                           ;newmain.c: 125:     }
  1644  007C5E  4A07               	infsnz	initial@i^0,f,c
  1645  007C60  2A08               	incf	(initial@i+1)^0,f,c
  1646  007C62  BE08               	btfsc	(initial@i+1)^0,7,c
  1647  007C64  EF3D  F03E         	goto	u861
  1648  007C68  5008               	movf	(initial@i+1)^0,w,c
  1649  007C6A  E109               	bnz	u860
  1650  007C6C  0E10               	movlw	16
  1651  007C6E  5C07               	subwf	initial@i^0,w,c
  1652  007C70  A0D8               	btfss	status,0,c
  1653  007C72  EF3D  F03E         	goto	u861
  1654  007C76  EF3F  F03E         	goto	u860
  1655  007C7A                     u861:
  1656  007C7A  EFF3  F03D         	goto	l1833
  1657  007C7E                     u860:
  1658  007C7E                     
  1659                           ;newmain.c: 126:     for(i = 16;i < 20;i++){
  1660  007C7E  0E00               	movlw	0
  1661  007C80  6E08               	movwf	(initial@i+1)^0,c
  1662  007C82  0E10               	movlw	16
  1663  007C84  6E07               	movwf	initial@i^0,c
  1664  007C86                     l1845:
  1665                           
  1666                           ;newmain.c: 127:         rgb[i].r = 0;
  1667  007C86  C007  F001         	movff	initial@i,___wmul@multiplier
  1668  007C8A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1669  007C8E  0E00               	movlw	0
  1670  007C90  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1671  007C92  0E06               	movlw	6
  1672  007C94  6E03               	movwf	___wmul@multiplicand^0,c
  1673  007C96  EC9A  F038         	call	___wmul	;wreg free
  1674  007C9A  0E00               	movlw	low _rgb
  1675  007C9C  2401               	addwf	?___wmul^0,w,c
  1676  007C9E  6ED9               	movwf	fsr2l,c
  1677  007CA0  0E01               	movlw	high _rgb
  1678  007CA2  2002               	addwfc	(?___wmul+1)^0,w,c
  1679  007CA4  6EDA               	movwf	fsr2h,c
  1680  007CA6  0E00               	movlw	0
  1681  007CA8  6EDE               	movwf	postinc2,c
  1682  007CAA  0E00               	movlw	0
  1683  007CAC  6EDD               	movwf	postdec2,c
  1684                           
  1685                           ;newmain.c: 128:         rgb[i].g = 0;
  1686  007CAE  C007  F001         	movff	initial@i,___wmul@multiplier
  1687  007CB2  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1688  007CB6  0E00               	movlw	0
  1689  007CB8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1690  007CBA  0E06               	movlw	6
  1691  007CBC  6E03               	movwf	___wmul@multiplicand^0,c
  1692  007CBE  EC9A  F038         	call	___wmul	;wreg free
  1693  007CC2  0E02               	movlw	low (_rgb+2)
  1694  007CC4  2401               	addwf	?___wmul^0,w,c
  1695  007CC6  6ED9               	movwf	fsr2l,c
  1696  007CC8  0E01               	movlw	high (_rgb+2)
  1697  007CCA  2002               	addwfc	(?___wmul+1)^0,w,c
  1698  007CCC  6EDA               	movwf	fsr2h,c
  1699  007CCE  0E00               	movlw	0
  1700  007CD0  6EDE               	movwf	postinc2,c
  1701  007CD2  0E00               	movlw	0
  1702  007CD4  6EDD               	movwf	postdec2,c
  1703                           
  1704                           ;newmain.c: 129:         rgb[i].b = 1;
  1705  007CD6  C007  F001         	movff	initial@i,___wmul@multiplier
  1706  007CDA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1707  007CDE  0E00               	movlw	0
  1708  007CE0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1709  007CE2  0E06               	movlw	6
  1710  007CE4  6E03               	movwf	___wmul@multiplicand^0,c
  1711  007CE6  EC9A  F038         	call	___wmul	;wreg free
  1712  007CEA  0E04               	movlw	low (_rgb+4)
  1713  007CEC  2401               	addwf	?___wmul^0,w,c
  1714  007CEE  6ED9               	movwf	fsr2l,c
  1715  007CF0  0E01               	movlw	high (_rgb+4)
  1716  007CF2  2002               	addwfc	(?___wmul+1)^0,w,c
  1717  007CF4  6EDA               	movwf	fsr2h,c
  1718  007CF6  0E01               	movlw	1
  1719  007CF8  6EDE               	movwf	postinc2,c
  1720  007CFA  0E00               	movlw	0
  1721  007CFC  6EDD               	movwf	postdec2,c
  1722  007CFE                     
  1723                           ;newmain.c: 130:     }
  1724  007CFE  4A07               	infsnz	initial@i^0,f,c
  1725  007D00  2A08               	incf	(initial@i+1)^0,f,c
  1726  007D02  BE08               	btfsc	(initial@i+1)^0,7,c
  1727  007D04  EF8D  F03E         	goto	u871
  1728  007D08  5008               	movf	(initial@i+1)^0,w,c
  1729  007D0A  E109               	bnz	u870
  1730  007D0C  0E14               	movlw	20
  1731  007D0E  5C07               	subwf	initial@i^0,w,c
  1732  007D10  A0D8               	btfss	status,0,c
  1733  007D12  EF8D  F03E         	goto	u871
  1734  007D16  EF8F  F03E         	goto	u870
  1735  007D1A                     u871:
  1736  007D1A  EF43  F03E         	goto	l1845
  1737  007D1E                     u870:
  1738  007D1E                     
  1739                           ;newmain.c: 131:     for(i = 20;i < 24;i++){
  1740  007D1E  0E00               	movlw	0
  1741  007D20  6E08               	movwf	(initial@i+1)^0,c
  1742  007D22  0E14               	movlw	20
  1743  007D24  6E07               	movwf	initial@i^0,c
  1744  007D26                     l1857:
  1745                           
  1746                           ;newmain.c: 132:         rgb[i].r = 0;
  1747  007D26  C007  F001         	movff	initial@i,___wmul@multiplier
  1748  007D2A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1749  007D2E  0E00               	movlw	0
  1750  007D30  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1751  007D32  0E06               	movlw	6
  1752  007D34  6E03               	movwf	___wmul@multiplicand^0,c
  1753  007D36  EC9A  F038         	call	___wmul	;wreg free
  1754  007D3A  0E00               	movlw	low _rgb
  1755  007D3C  2401               	addwf	?___wmul^0,w,c
  1756  007D3E  6ED9               	movwf	fsr2l,c
  1757  007D40  0E01               	movlw	high _rgb
  1758  007D42  2002               	addwfc	(?___wmul+1)^0,w,c
  1759  007D44  6EDA               	movwf	fsr2h,c
  1760  007D46  0E00               	movlw	0
  1761  007D48  6EDE               	movwf	postinc2,c
  1762  007D4A  0E00               	movlw	0
  1763  007D4C  6EDD               	movwf	postdec2,c
  1764                           
  1765                           ;newmain.c: 133:         rgb[i].g = 0;
  1766  007D4E  C007  F001         	movff	initial@i,___wmul@multiplier
  1767  007D52  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1768  007D56  0E00               	movlw	0
  1769  007D58  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1770  007D5A  0E06               	movlw	6
  1771  007D5C  6E03               	movwf	___wmul@multiplicand^0,c
  1772  007D5E  EC9A  F038         	call	___wmul	;wreg free
  1773  007D62  0E02               	movlw	low (_rgb+2)
  1774  007D64  2401               	addwf	?___wmul^0,w,c
  1775  007D66  6ED9               	movwf	fsr2l,c
  1776  007D68  0E01               	movlw	high (_rgb+2)
  1777  007D6A  2002               	addwfc	(?___wmul+1)^0,w,c
  1778  007D6C  6EDA               	movwf	fsr2h,c
  1779  007D6E  0E00               	movlw	0
  1780  007D70  6EDE               	movwf	postinc2,c
  1781  007D72  0E00               	movlw	0
  1782  007D74  6EDD               	movwf	postdec2,c
  1783                           
  1784                           ;newmain.c: 134:         rgb[i].b = 0;
  1785  007D76  C007  F001         	movff	initial@i,___wmul@multiplier
  1786  007D7A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1787  007D7E  0E00               	movlw	0
  1788  007D80  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1789  007D82  0E06               	movlw	6
  1790  007D84  6E03               	movwf	___wmul@multiplicand^0,c
  1791  007D86  EC9A  F038         	call	___wmul	;wreg free
  1792  007D8A  0E04               	movlw	low (_rgb+4)
  1793  007D8C  2401               	addwf	?___wmul^0,w,c
  1794  007D8E  6ED9               	movwf	fsr2l,c
  1795  007D90  0E01               	movlw	high (_rgb+4)
  1796  007D92  2002               	addwfc	(?___wmul+1)^0,w,c
  1797  007D94  6EDA               	movwf	fsr2h,c
  1798  007D96  0E00               	movlw	0
  1799  007D98  6EDE               	movwf	postinc2,c
  1800  007D9A  0E00               	movlw	0
  1801  007D9C  6EDD               	movwf	postdec2,c
  1802  007D9E                     
  1803                           ;newmain.c: 135:     }
  1804  007D9E  4A07               	infsnz	initial@i^0,f,c
  1805  007DA0  2A08               	incf	(initial@i+1)^0,f,c
  1806  007DA2  BE08               	btfsc	(initial@i+1)^0,7,c
  1807  007DA4  EFDD  F03E         	goto	u881
  1808  007DA8  5008               	movf	(initial@i+1)^0,w,c
  1809  007DAA  E109               	bnz	u880
  1810  007DAC  0E18               	movlw	24
  1811  007DAE  5C07               	subwf	initial@i^0,w,c
  1812  007DB0  A0D8               	btfss	status,0,c
  1813  007DB2  EFDD  F03E         	goto	u881
  1814  007DB6  EFDF  F03E         	goto	u880
  1815  007DBA                     u881:
  1816  007DBA  EF93  F03E         	goto	l1857
  1817  007DBE                     u880:
  1818  007DBE  0012               	return		;funcret
  1819  007DC0                     __end_of_initial:
  1820                           	opt callstack 0
  1821                           
  1822 ;; *************** function ___wmul *****************
  1823 ;; Defined at:
  1824 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  multiplier      2    0[COMRAM] unsigned int 
  1827 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1828 ;; Auto vars:     Size  Location     Type
  1829 ;;  product         2    4[COMRAM] unsigned int 
  1830 ;; Return value:  Size  Location     Type
  1831 ;;                  2    0[COMRAM] unsigned int 
  1832 ;; Registers used:
  1833 ;;		wreg, status,2, status,0, prodl, prodh
  1834 ;; Tracked objects:
  1835 ;;		On entry : 0/0
  1836 ;;		On exit  : 0/0
  1837 ;;		Unchanged: 0/0
  1838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1839 ;;      Params:         4       0       0       0       0       0       0
  1840 ;;      Locals:         2       0       0       0       0       0       0
  1841 ;;      Temps:          0       0       0       0       0       0       0
  1842 ;;      Totals:         6       0       0       0       0       0       0
  1843 ;;Total ram usage:        6 bytes
  1844 ;; Hardware stack levels used:    1
  1845 ;; This function calls:
  1846 ;;		Nothing
  1847 ;; This function is called by:
  1848 ;;		_initial
  1849 ;;		_main
  1850 ;; This function uses a non-reentrant model
  1851 ;;
  1852                           
  1853                           	psect	text4
  1854  007134                     __ptext4:
  1855                           	opt callstack 0
  1856  007134                     ___wmul:
  1857                           	opt callstack 29
  1858  007134  5001               	movf	___wmul@multiplier^0,w,c
  1859  007136  0203               	mulwf	___wmul@multiplicand^0,c
  1860  007138  CFF3 F005          	movff	prodl,___wmul@product
  1861  00713C  CFF4 F006          	movff	prodh,___wmul@product+1
  1862  007140  5001               	movf	___wmul@multiplier^0,w,c
  1863  007142  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1864  007144  50F3               	movf	243,w,c
  1865  007146  2606               	addwf	(___wmul@product+1)^0,f,c
  1866  007148  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1867  00714A  0203               	mulwf	___wmul@multiplicand^0,c
  1868  00714C  50F3               	movf	243,w,c
  1869  00714E  2606               	addwf	(___wmul@product+1)^0,f,c
  1870  007150  C005  F001         	movff	___wmul@product,?___wmul
  1871  007154  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1872  007158  0012               	return		;funcret
  1873  00715A                     __end_of___wmul:
  1874                           	opt callstack 0
  1875                           
  1876 ;; *************** function ___awdiv *****************
  1877 ;; Defined at:
  1878 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  dividend        2    0[COMRAM] int 
  1881 ;;  divisor         2    2[COMRAM] int 
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;  quotient        2    6[COMRAM] int 
  1884 ;;  sign            1    5[COMRAM] unsigned char 
  1885 ;;  counter         1    4[COMRAM] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  2    0[COMRAM] int 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1895 ;;      Params:         4       0       0       0       0       0       0
  1896 ;;      Locals:         4       0       0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0
  1898 ;;      Totals:         8       0       0       0       0       0       0
  1899 ;;Total ram usage:        8 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text5
  1909  0071D6                     __ptext5:
  1910                           	opt callstack 0
  1911  0071D6                     ___awdiv:
  1912                           	opt callstack 30
  1913  0071D6  0E00               	movlw	0
  1914  0071D8  6E06               	movwf	___awdiv@sign^0,c
  1915  0071DA  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1916  0071DC  EFF4  F038         	goto	u1070
  1917  0071E0  EFF2  F038         	goto	u1071
  1918  0071E4                     u1071:
  1919  0071E4  EFFA  F038         	goto	l2111
  1920  0071E8                     u1070:
  1921  0071E8  6C03               	negf	___awdiv@divisor^0,c
  1922  0071EA  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1923  0071EC  B0D8               	btfsc	status,0,c
  1924  0071EE  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1925  0071F0  0E01               	movlw	1
  1926  0071F2  6E06               	movwf	___awdiv@sign^0,c
  1927  0071F4                     l2111:
  1928  0071F4  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1929  0071F6  EF01  F039         	goto	u1080
  1930  0071FA  EFFF  F038         	goto	u1081
  1931  0071FE                     u1081:
  1932  0071FE  EF07  F039         	goto	l2117
  1933  007202                     u1080:
  1934  007202  6C01               	negf	___awdiv@dividend^0,c
  1935  007204  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1936  007206  B0D8               	btfsc	status,0,c
  1937  007208  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1938  00720A  0E01               	movlw	1
  1939  00720C  1A06               	xorwf	___awdiv@sign^0,f,c
  1940  00720E                     l2117:
  1941  00720E  0E00               	movlw	0
  1942  007210  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1943  007212  0E00               	movlw	0
  1944  007214  6E07               	movwf	___awdiv@quotient^0,c
  1945  007216  5003               	movf	___awdiv@divisor^0,w,c
  1946  007218  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1947  00721A  B4D8               	btfsc	status,2,c
  1948  00721C  EF12  F039         	goto	u1091
  1949  007220  EF14  F039         	goto	u1090
  1950  007224                     u1091:
  1951  007224  EF3C  F039         	goto	l2139
  1952  007228                     u1090:
  1953  007228  0E01               	movlw	1
  1954  00722A  6E05               	movwf	___awdiv@counter^0,c
  1955  00722C  EF1C  F039         	goto	l2125
  1956  007230                     l2123:
  1957  007230  90D8               	bcf	status,0,c
  1958  007232  3603               	rlcf	___awdiv@divisor^0,f,c
  1959  007234  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1960  007236  2A05               	incf	___awdiv@counter^0,f,c
  1961  007238                     l2125:
  1962  007238  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1963  00723A  EF21  F039         	goto	u1101
  1964  00723E  EF23  F039         	goto	u1100
  1965  007242                     u1101:
  1966  007242  EF18  F039         	goto	l2123
  1967  007246                     u1100:
  1968  007246                     l2127:
  1969  007246  90D8               	bcf	status,0,c
  1970  007248  3607               	rlcf	___awdiv@quotient^0,f,c
  1971  00724A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1972  00724C  5003               	movf	___awdiv@divisor^0,w,c
  1973  00724E  5C01               	subwf	___awdiv@dividend^0,w,c
  1974  007250  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1975  007252  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1976  007254  A0D8               	btfss	status,0,c
  1977  007256  EF2F  F039         	goto	u1111
  1978  00725A  EF31  F039         	goto	u1110
  1979  00725E                     u1111:
  1980  00725E  EF36  F039         	goto	l2135
  1981  007262                     u1110:
  1982  007262  5003               	movf	___awdiv@divisor^0,w,c
  1983  007264  5E01               	subwf	___awdiv@dividend^0,f,c
  1984  007266  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1985  007268  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1986  00726A  8007               	bsf	___awdiv@quotient^0,0,c
  1987  00726C                     l2135:
  1988  00726C  90D8               	bcf	status,0,c
  1989  00726E  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1990  007270  3203               	rrcf	___awdiv@divisor^0,f,c
  1991  007272  2E05               	decfsz	___awdiv@counter^0,f,c
  1992  007274  EF23  F039         	goto	l2127
  1993  007278                     l2139:
  1994  007278  5006               	movf	___awdiv@sign^0,w,c
  1995  00727A  B4D8               	btfsc	status,2,c
  1996  00727C  EF42  F039         	goto	u1121
  1997  007280  EF44  F039         	goto	u1120
  1998  007284                     u1121:
  1999  007284  EF48  F039         	goto	l2143
  2000  007288                     u1120:
  2001  007288  6C07               	negf	___awdiv@quotient^0,c
  2002  00728A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2003  00728C  B0D8               	btfsc	status,0,c
  2004  00728E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2005  007290                     l2143:
  2006  007290  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2007  007294  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2008  007298  0012               	return		;funcret
  2009  00729A                     __end_of___awdiv:
  2010                           	opt callstack 0
  2011                           
  2012 ;; *************** function _ADC_Read *****************
  2013 ;; Defined at:
  2014 ;;		line 88 in file "newmain.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  channle         2    0[COMRAM] int 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  digital         2    4[COMRAM] int 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  2    0[COMRAM] int 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2028 ;;      Params:         2       0       0       0       0       0       0
  2029 ;;      Locals:         2       0       0       0       0       0       0
  2030 ;;      Temps:          2       0       0       0       0       0       0
  2031 ;;      Totals:         6       0       0       0       0       0       0
  2032 ;;Total ram usage:        6 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_main
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text6
  2042  00715A                     __ptext6:
  2043                           	opt callstack 0
  2044  00715A                     _ADC_Read:
  2045                           	opt callstack 30
  2046  00715A                     
  2047                           ;newmain.c: 88: int ADC_Read(int channle);newmain.c: 89: {;newmain.c: 90:     int digita
      +                          l;;newmain.c: 92:     if(channle == 2) channle = 6;
  2048  00715A  0E02               	movlw	2
  2049  00715C  1801               	xorwf	ADC_Read@channle^0,w,c
  2050  00715E  1002               	iorwf	(ADC_Read@channle+1)^0,w,c
  2051  007160  A4D8               	btfss	status,2,c
  2052  007162  EFB5  F038         	goto	u801
  2053  007166  EFB7  F038         	goto	u800
  2054  00716A                     u801:
  2055  00716A  EFBB  F038         	goto	l1775
  2056  00716E                     u800:
  2057  00716E  0E00               	movlw	0
  2058  007170  6E02               	movwf	(ADC_Read@channle+1)^0,c
  2059  007172  0E06               	movlw	6
  2060  007174  6E01               	movwf	ADC_Read@channle^0,c
  2061  007176                     l1775:
  2062                           
  2063                           ;newmain.c: 93:     if(channle == 3) channle = 7;
  2064  007176  0E03               	movlw	3
  2065  007178  1801               	xorwf	ADC_Read@channle^0,w,c
  2066  00717A  1002               	iorwf	(ADC_Read@channle+1)^0,w,c
  2067  00717C  A4D8               	btfss	status,2,c
  2068  00717E  EFC3  F038         	goto	u811
  2069  007182  EFC5  F038         	goto	u810
  2070  007186                     u811:
  2071  007186  EFC9  F038         	goto	l1779
  2072  00718A                     u810:
  2073  00718A  0E00               	movlw	0
  2074  00718C  6E02               	movwf	(ADC_Read@channle+1)^0,c
  2075  00718E  0E07               	movlw	7
  2076  007190  6E01               	movwf	ADC_Read@channle^0,c
  2077  007192                     l1779:
  2078                           
  2079                           ;newmain.c: 94:     ADCON0bits.CHS = channle;
  2080  007192  C001  F003         	movff	ADC_Read@channle,??_ADC_Read
  2081  007196  4603               	rlncf	??_ADC_Read^0,f,c
  2082  007198  4603               	rlncf	??_ADC_Read^0,f,c
  2083  00719A  50C2               	movf	194,w,c	;volatile
  2084  00719C  1803               	xorwf	??_ADC_Read^0,w,c
  2085  00719E  0BC3               	andlw	-61
  2086  0071A0  1803               	xorwf	??_ADC_Read^0,w,c
  2087  0071A2  6EC2               	movwf	194,c	;volatile
  2088  0071A4                     
  2089                           ;newmain.c: 95:     ADCON0bits.GO = 1;
  2090  0071A4  82C2               	bsf	194,1,c	;volatile
  2091  0071A6                     
  2092                           ;newmain.c: 96:     ADCON0bits.ADON = 1;
  2093  0071A6  80C2               	bsf	194,0,c	;volatile
  2094  0071A8                     l34:
  2095  0071A8  B2C2               	btfsc	194,1,c	;volatile
  2096  0071AA  EFD9  F038         	goto	u821
  2097  0071AE  EFDB  F038         	goto	u820
  2098  0071B2                     u821:
  2099  0071B2  EFD4  F038         	goto	l34
  2100  0071B6                     u820:
  2101  0071B6                     
  2102                           ;newmain.c: 100:     digital = (ADRESH*256) | (ADRESL);
  2103  0071B6  50C3               	movf	195,w,c	;volatile
  2104  0071B8  CFC4 F003          	movff	4036,??_ADC_Read	;volatile
  2105  0071BC  6A04               	clrf	(??_ADC_Read+1)^0,c
  2106  0071BE  C003  F004         	movff	??_ADC_Read,??_ADC_Read+1
  2107  0071C2  6A03               	clrf	??_ADC_Read^0,c
  2108  0071C4  1003               	iorwf	??_ADC_Read^0,w,c
  2109  0071C6  6E05               	movwf	ADC_Read@digital^0,c
  2110  0071C8  5004               	movf	(??_ADC_Read+1)^0,w,c
  2111  0071CA  6E06               	movwf	(ADC_Read@digital+1)^0,c
  2112  0071CC                     
  2113                           ;newmain.c: 101:     return(digital);
  2114  0071CC  C005  F001         	movff	ADC_Read@digital,?_ADC_Read
  2115  0071D0  C006  F002         	movff	ADC_Read@digital+1,?_ADC_Read+1
  2116  0071D4  0012               	return		;funcret
  2117  0071D6                     __end_of_ADC_Read:
  2118                           	opt callstack 0
  2119                           
  2120 ;; *************** function _ADC_Initialize *****************
  2121 ;; Defined at:
  2122 ;;		line 78 in file "newmain.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2136 ;;      Params:         0       0       0       0       0       0       0
  2137 ;;      Locals:         0       0       0       0       0       0       0
  2138 ;;      Temps:          0       0       0       0       0       0       0
  2139 ;;      Totals:         0       0       0       0       0       0       0
  2140 ;;Total ram usage:        0 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text7
  2150  0070FC                     __ptext7:
  2151                           	opt callstack 0
  2152  0070FC                     _ADC_Initialize:
  2153                           	opt callstack 30
  2154  0070FC                     
  2155                           ;newmain.c: 80:     TRISA = 0xff;
  2156  0070FC  6892               	setf	146,c	;volatile
  2157  0070FE                     
  2158                           ;newmain.c: 81:     ADCON1 = 0x00;
  2159  0070FE  0E00               	movlw	0
  2160  007100  6EC1               	movwf	193,c	;volatile
  2161                           
  2162                           ;newmain.c: 82:     ADCON2 = 0x90;
  2163  007102  0E90               	movlw	144
  2164  007104  6EC0               	movwf	192,c	;volatile
  2165  007106                     
  2166                           ;newmain.c: 83:     ADFM = 1 ;
  2167  007106  8EC0               	bsf	4032,7,c	;volatile
  2168                           
  2169                           ;newmain.c: 84:     ADCON2bits.ADCS = 0;
  2170  007108  0EF8               	movlw	-8
  2171  00710A  16C0               	andwf	192,f,c	;volatile
  2172                           
  2173                           ;newmain.c: 85:     ADRESH=0;
  2174  00710C  0E00               	movlw	0
  2175  00710E  6EC4               	movwf	196,c	;volatile
  2176                           
  2177                           ;newmain.c: 86:     ADRESL=0;
  2178  007110  0E00               	movlw	0
  2179  007112  6EC3               	movwf	195,c	;volatile
  2180  007114  0012               	return		;funcret
  2181  007116                     __end_of_ADC_Initialize:
  2182                           	opt callstack 0
  2183  0000                     
  2184                           	psect	rparam
  2185  0000                     tosu	equ	0xFFF
  2186                           tosh	equ	0xFFE
  2187                           tosl	equ	0xFFD
  2188                           stkptr	equ	0xFFC
  2189                           pclatu	equ	0xFFB
  2190                           pclath	equ	0xFFA
  2191                           pcl	equ	0xFF9
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           prodh	equ	0xFF4
  2197                           prodl	equ	0xFF3
  2198                           indf0	equ	0xFEF
  2199                           postinc0	equ	0xFEE
  2200                           postdec0	equ	0xFED
  2201                           preinc0	equ	0xFEC
  2202                           plusw0	equ	0xFEB
  2203                           fsr0h	equ	0xFEA
  2204                           fsr0l	equ	0xFE9
  2205                           wreg	equ	0xFE8
  2206                           indf1	equ	0xFE7
  2207                           postinc1	equ	0xFE6
  2208                           postdec1	equ	0xFE5
  2209                           preinc1	equ	0xFE4
  2210                           plusw1	equ	0xFE3
  2211                           fsr1h	equ	0xFE2
  2212                           fsr1l	equ	0xFE1
  2213                           bsr	equ	0xFE0
  2214                           indf2	equ	0xFDF
  2215                           postinc2	equ	0xFDE
  2216                           postdec2	equ	0xFDD
  2217                           preinc2	equ	0xFDC
  2218                           plusw2	equ	0xFDB
  2219                           fsr2h	equ	0xFDA
  2220                           fsr2l	equ	0xFD9
  2221                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         156
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     52      64
    BANK0           128      0       0
    BANK1           256      0     144
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_rotate_l
    _main->_rotate_r
    _rotate_r->___awdiv
    _rotate_l->___awdiv
    _initial->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0    9888
                                             39 COMRAM    13    13      0
                     _ADC_Initialize
                           _ADC_Read
                            ___awdiv
                             ___wmul
                            _initial
                           _rotate_l
                           _rotate_r
 ---------------------------------------------------------------------------------
 (1) _rotate_r                                            31    29      2     511
                                              8 COMRAM    31    29      2
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _rotate_l                                            31    29      2     511
                                              8 COMRAM    31    29      2
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _initial                                              2     2      0    4023
                                              6 COMRAM     2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3351
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             6     4      2     243
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_Read
   ___awdiv
   ___wmul
   _initial
     ___wmul
   _rotate_l
     ___awdiv (ARG)
   _rotate_r
     ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F3      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      90       6       56.3%
BITBANK5            F4      0       0      15        0.0%
BANK5               F4      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     34      40       1       50.4%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D0      14        0.0%
DATA                 0      0      D0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Dec 20 01:13:30 2019

                     l34 71A8                       l52 7DBE                       l29 7114  
                     l37 71D4                       l65 79FC                       l78 776E  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l148 7158                      l379 7298  
                    l831 7106                      l827 70FC                      l829 70FE  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u800 716E  
                    u801 716A                      u810 718A                      u811 7186  
                    u820 71B6                      u900 77B2                      u821 71B2  
                    u901 77AE                      u830 7A9E                      u831 7A9A  
                    u911 77CC                      u840 7B3E                      u841 7B3A  
                    u921 77DE                      u850 7BDE                      u930 78C6  
                    u851 7BDA                      u931 78C2                      u860 7C7E  
                    u940 78E8                      u861 7C7A                      u941 78E4  
                    u870 7D1E                      u871 7D1A                      u951 7902  
                    u880 7DBE                      u881 7DBA                      u961 7914  
                    u970 79FC                      u890 778C                      u971 79F8  
                    u891 7788                      u980 74FE                      u981 74FA  
                    u990 7524                      u991 7520                      _rgb 0100  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l2001 7578                     l2011 75A0                     l2003 7580  
                   l2101 7754                     l2021 75C8                     l2013 75A8  
                   l2005 7588                     l2111 71F4                     l2103 71D6  
                   l2031 75F0                     l2023 75D0                     l2015 75B0  
                   l2007 7590                     l2121 7228                     l2113 7202  
                   l2105 71DA                     l2041 7618                     l2033 75F8  
                   l2025 75D8                     l2017 75B8                     l2009 7598  
                   l2201 7460                     l2131 7262                     l2123 7230  
                   l2115 720A                     l2107 71E8                     l2051 768E  
                   l2035 7600                     l2027 75E0                     l2019 75C0  
                   l2043 761E                     l2211 74A2                     l2203 747A  
                   l2141 7288                     l2133 726A                     l2125 7238  
                   l2117 720E                     l2109 71F0                     l2061 76B6  
                   l2053 7696                     l2037 7608                     l2029 75E8  
                   l2045 763C                     l2213 74A6                     l2205 7484  
                   l2143 7290                     l2135 726C                     l2127 7246  
                   l2119 7216                     l2071 76DE                     l2063 76BE  
                   l2055 769E                     l2047 765A                     l2039 7610  
                   l2215 74BA                     l2207 748E                     l2151 72A2  
                   l2137 7272                     l2129 724C                     l2081 7706  
                   l2073 76E6                     l2065 76C6                     l2057 76A6  
                   l2049 766A                     l2217 74C2                     l2209 7498  
                   l2153 72A6                     l2139 7278                     l2091 772E  
                   l2083 770E                     l2075 76EE                     l2067 76CE  
                   l2059 76AE                     l2219 74C6                     l2171 72F6  
                   l2155 72AA                     l2147 729A                     l2093 7736  
                   l2085 7716                     l2077 76F6                     l2069 76D6  
                   l2181 7366                     l2173 72FE                     l2165 72BC  
                   l2157 72AC                     l2149 729E                     l2095 773E  
                   l2087 771E                     l2079 76FE                     l2191 73F8  
                   l2183 737A                     l2175 7312                     l2167 72D6  
                   l2159 72B4                     l1801 7A82                     l2097 7746  
                   l2089 7726                     l2193 7428                     l2185 738E  
                   l2177 7326                     l2169 72DA                     l1811 7B1E  
                   l1803 7A9E                     l2099 774E                     l2195 745A  
                   l2187 73AE                     l2179 7346                     l1821 7B46  
                   l1813 7B22                     l1901 7856                     l2197 745C  
                   l2189 73CA                     l1823 7BBE                     l1815 7B3E  
                   l1911 787E                     l1903 785E                     l2199 745E  
                   l1833 7BE6                     l1825 7BC2                     l1809 7AA6  
                   l1921 78A6                     l1913 7886                     l1905 7866  
                   l1771 715A                     l1851 7D1E                     l1835 7C5E  
                   l1827 7BDE                     l1931 791C                     l1915 788E  
                   l1907 786E                     l1923 78AC                     l1781 71A4  
                   l1773 716E                     l1765 7134                     l1861 7DA2  
                   l1845 7C86                     l1837 7C62                     l1941 7944  
                   l1933 7924                     l1917 7896                     l1909 7876  
                   l1925 78CA                     l1783 71A6                     l1775 7176  
                   l1767 7150                     l1847 7CFE                     l1839 7C7E  
                   l1791 79FE                     l1951 796C                     l1943 794C  
                   l1935 792C                     l1927 78E8                     l1919 789E  
                   l1871 77C2                     l1863 7770                     l1785 71B6  
                   l1777 718A                     l1857 7D26                     l1849 7D02  
                   l1961 7994                     l1953 7974                     l1945 7954  
                   l1937 7934                     l1929 78F8                     l1881 7806  
                   l1873 77E6                     l1865 778C                     l1787 71CC  
                   l1779 7192                     l1859 7D9E                     l1971 79BC  
                   l1963 799C                     l1955 797C                     l1947 795C  
                   l1939 793C                     l1891 782E                     l1883 780E  
                   l1875 77EE                     l1867 7794                     l1797 7A06  
                   l1973 79C4                     l1965 79A4                     l1957 7984  
                   l1949 7964                     l1981 79E2                     l1893 7836  
                   l1885 7816                     l1877 77F6                     l1869 77B2  
                   l1799 7A7E                     l1991 7534                     l1983 74E2  
                   l1975 79CC                     l1967 79AC                     l1959 798C  
                   l1895 783E                     l1887 781E                     l1879 77FE  
                   l1993 7558                     l1985 74FE                     l1977 79D4  
                   l1969 79B4                     l1897 7846                     l1889 7826  
                   l1995 7560                     l1987 7506                     l1979 79DC  
                   l1899 784E                     l1997 7568                     l1989 7524  
                   l1999 7570                     _ADFM 007E07                     u1001 753E  
                   u1011 7550                     u1100 7246                     u1020 7638  
                   u1101 7242                     u1021 7634                     u1110 7262  
                   u1030 765A                     u1111 725E                     u1031 7656  
                   u1120 7288                     u1121 7284                     u1041 7674  
                   u1210 74BA                     u1130 72F6                     u1051 7686  
                   u1211 74B6                     u1131 72F2                     u1060 776E  
                   u1220 74DA                     u1140 7312                     u1061 776A  
                   u1221 74D6                     u1205 74A0                     u1141 730E  
                   u1070 71E8                     u1206 74A2                     u1150 737A  
                   u1071 71E4                     u1151 7376                     u1080 7202  
                   u1160 7472                     u1081 71FE                     u1161 746A  
                   u1090 7228                     u1091 7224                     u1175 7482  
                   u1168 7474                     _LATD 000F8C                     u1185 748C  
                   u1177 7484                     u1195 7496                     u1187 748E  
                   u1197 7498              main@val_337 002D                     _main 729A  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
       __end_of_ADC_Read 71D6                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001          __end_of___awdiv 729A  
        ___awdiv@divisor 0003          ___awdiv@counter 0005                    _TRISA 000F92  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_initial 7DC0                    main@i 0033                    main@j 002F  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
        __initialization 7116             __end_of_main 74E2                   ??_main 0028  
          __activetblptr 000000                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0001  
         __CFG_XINST$OFF 000000                   ___wmul 7134                ??___awdiv 0005  
         __CFG_STVREN$ON 000000          ADC_Read@channle 0001          ADC_Read@digital 0005  
                 clear_0 711C                   clear_1 7128         ___awdiv@quotient 0007  
              ??_initial 0007                ?_ADC_Read 0001         __end_of_rotate_l 7770  
       __end_of_rotate_r 79FE               __accesstop 0080  __end_of__initialization 712E  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
             ??_ADC_Read 0003               __pbssBANK1 0100          rotate_l@buf_227 000E  
                ?___wmul 0001            rotate_l@tempa 0010            rotate_l@tempb 0016  
          rotate_l@tempc 001C            rotate_l@tempd 0022            rotate_r@tempa 0010  
          rotate_r@tempb 0016            rotate_r@tempc 001C            rotate_r@tempd 0022  
__size_of_ADC_Initialize 001A          rotate_r@buf_207 000E                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 71D6          __size_of___wmul 0026  
              ?_rotate_l 0009                ?_rotate_r 0009                  __pcinit 7116  
                __ramtop 0600                  __ptext0 729A                  __ptext1 7770  
                __ptext2 74E2                  __ptext3 79FE                  __ptext4 7134  
                __ptext5 71D6                  __ptext6 715A                  __ptext7 70FC  
                _initial 79FE                  main@val 002B     end_of_initialization 712E  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
             ??_rotate_l 000B               ??_rotate_r 000B        __size_of_ADC_Read 007C  
         __end_of___wmul 715A           _ADC_Initialize 70FC      start_initialization 7116  
            rotate_l@buf 000C              rotate_l@val 0009              rotate_r@buf 000C  
            rotate_r@val 0009         __CFG_OSC$INTIO67 000000                 ??___wmul 0005  
 __end_of_ADC_Initialize 7116         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0035  
      __CFG_CCP2MX$PORTC 000000                 ?___awdiv 0001          ?_ADC_Initialize 0001  
      __size_of_rotate_l 028E        __size_of_rotate_r 028E                 ?_initial 0001  
               _ADC_Read 715A           ___wmul@product 0005                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2               _ADCON2bits 000FC0  
      ___wmul@multiplier 0001                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of___awdiv 00C4         __size_of_initial 03C2  
          __size_of_main 0248                 _original 0035                 _rotate_l 74E2  
               _rotate_r 7770                 main@temp 0029                 main@turn 0031  
               initial@i 0007         ??_ADC_Initialize 0001  
