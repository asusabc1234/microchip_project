

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Dec 15 00:42:14 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4520 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _LATDbits	set	3980
    54  0000                     _LATD	set	3980
    55  0000                     _TRISD	set	3989
    56  0000                     _TRISA	set	3986
    57  0000                     _ADCON0bits	set	4034
    58  0000                     _ADRESL	set	4035
    59  0000                     _ADRESH	set	4036
    60  0000                     _ADCON2bits	set	4032
    61  0000                     _ADCON2	set	4032
    62  0000                     _ADCON1	set	4033
    63  0000                     _ADFM	set	32263
    64                           
    65                           ; #config settings
    66  0000                     
    67                           	psect	cinit
    68  0074BC                     __pcinit:
    69                           	opt callstack 0
    70  0074BC                     start_initialization:
    71                           	opt callstack 0
    72  0074BC                     __initialization:
    73                           	opt callstack 0
    74                           
    75                           ; Clear objects allocated to BANK1 (144 bytes)
    76  0074BC  EE01  F000         	lfsr	0,__pbssBANK1
    77  0074C0  0E90               	movlw	144
    78  0074C2                     clear_0:
    79  0074C2  6AEE               	clrf	postinc0,c
    80  0074C4  06E8               	decf	wreg,f,c
    81  0074C6  E1FD               	bnz	clear_0
    82                           
    83                           ; Clear objects allocated to COMRAM (2 bytes)
    84  0074C8  6A30               	clrf	(__pbssCOMRAM+1)& (0+255),c
    85  0074CA  6A2F               	clrf	__pbssCOMRAM& (0+255),c
    86  0074CC                     end_of_initialization:
    87                           	opt callstack 0
    88  0074CC                     __end_of__initialization:
    89                           	opt callstack 0
    90  0074CC  0100               	movlb	0
    91  0074CE  EF07  F03B         	goto	_main	;jump to C main() function
    92                           
    93                           	psect	bssCOMRAM
    94  00002F                     __pbssCOMRAM:
    95                           	opt callstack 0
    96  00002F                     _original_r:
    97                           	opt callstack 0
    98  00002F                     	ds	2
    99                           
   100                           	psect	bssBANK1
   101  000100                     __pbssBANK1:
   102                           	opt callstack 0
   103  000100                     _rgb:
   104                           	opt callstack 0
   105  000100                     	ds	144
   106                           
   107                           	psect	cstackCOMRAM
   108  000001                     __pcstackCOMRAM:
   109                           	opt callstack 0
   110  000001                     ?_ADC_Read:
   111                           	opt callstack 0
   112  000001                     ?___wmul:
   113                           	opt callstack 0
   114  000001                     ?___awdiv:
   115                           	opt callstack 0
   116  000001                     ___wmul@multiplier:
   117                           	opt callstack 0
   118  000001                     ___awdiv@dividend:
   119                           	opt callstack 0
   120                           
   121                           ; 2 bytes @ 0x0
   122  000001                     	ds	2
   123  000003                     ??_ADC_Read:
   124  000003                     ___wmul@multiplicand:
   125                           	opt callstack 0
   126  000003                     ___awdiv@divisor:
   127                           	opt callstack 0
   128                           
   129                           ; 2 bytes @ 0x2
   130  000003                     	ds	2
   131  000005                     ___awdiv@counter:
   132                           	opt callstack 0
   133  000005                     ADC_Read@digital:
   134                           	opt callstack 0
   135  000005                     ___wmul@product:
   136                           	opt callstack 0
   137                           
   138                           ; 2 bytes @ 0x4
   139  000005                     	ds	1
   140  000006                     ___awdiv@sign:
   141                           	opt callstack 0
   142                           
   143                           ; 1 bytes @ 0x5
   144  000006                     	ds	1
   145  000007                     initial@i:
   146                           	opt callstack 0
   147  000007                     ___awdiv@quotient:
   148                           	opt callstack 0
   149                           
   150                           ; 2 bytes @ 0x6
   151  000007                     	ds	2
   152  000009                     rotate_r@val:
   153                           	opt callstack 0
   154                           
   155                           ; 2 bytes @ 0x8
   156  000009                     	ds	2
   157  00000B                     ??_rotate_r:
   158                           
   159                           ; 1 bytes @ 0xA
   160  00000B                     	ds	1
   161  00000C                     rotate_r@buf:
   162                           	opt callstack 0
   163                           
   164                           ; 2 bytes @ 0xB
   165  00000C                     	ds	2
   166  00000E                     rotate_r@buf_212:
   167                           	opt callstack 0
   168                           
   169                           ; 2 bytes @ 0xD
   170  00000E                     	ds	2
   171  000010                     rotate_r@tempa:
   172                           	opt callstack 0
   173                           
   174                           ; 6 bytes @ 0xF
   175  000010                     	ds	6
   176  000016                     rotate_r@tempb:
   177                           	opt callstack 0
   178                           
   179                           ; 6 bytes @ 0x15
   180  000016                     	ds	6
   181  00001C                     rotate_r@tempc:
   182                           	opt callstack 0
   183                           
   184                           ; 6 bytes @ 0x1B
   185  00001C                     	ds	6
   186  000022                     rotate_r@tempd:
   187                           	opt callstack 0
   188                           
   189                           ; 6 bytes @ 0x21
   190  000022                     	ds	6
   191  000028                     ??_main:
   192                           
   193                           ; 1 bytes @ 0x27
   194  000028                     	ds	1
   195  000029                     main@temp:
   196                           	opt callstack 0
   197                           
   198                           ; 2 bytes @ 0x28
   199  000029                     	ds	2
   200  00002B                     main@val:
   201                           	opt callstack 0
   202                           
   203                           ; 2 bytes @ 0x2A
   204  00002B                     	ds	2
   205  00002D                     main@i:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x2C
   209  00002D                     	ds	2
   210                           
   211 ;;
   212 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   213 ;;
   214 ;; *************** function _main *****************
   215 ;; Defined at:
   216 ;;		line 192 in file "newmain.c"
   217 ;; Parameters:    Size  Location     Type
   218 ;;		None
   219 ;; Auto vars:     Size  Location     Type
   220 ;;  val             2   42[COMRAM] int 
   221 ;;  temp            2   40[COMRAM] int 
   222 ;;  i               2   44[COMRAM] int 
   223 ;; Return value:  Size  Location     Type
   224 ;;                  1    wreg      void 
   225 ;; Registers used:
   226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   227 ;; Tracked objects:
   228 ;;		On entry : 0/0
   229 ;;		On exit  : 0/0
   230 ;;		Unchanged: 0/0
   231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   232 ;;      Params:         0       0       0       0       0       0       0
   233 ;;      Locals:         6       0       0       0       0       0       0
   234 ;;      Temps:          1       0       0       0       0       0       0
   235 ;;      Totals:         7       0       0       0       0       0       0
   236 ;;Total ram usage:        7 bytes
   237 ;; Hardware stack levels required when called:    2
   238 ;; This function calls:
   239 ;;		_ADC_Initialize
   240 ;;		_ADC_Read
   241 ;;		___awdiv
   242 ;;		___wmul
   243 ;;		_initial
   244 ;;		_rotate_r
   245 ;; This function is called by:
   246 ;;		Startup code after reset
   247 ;; This function uses a non-reentrant model
   248 ;;
   249                           
   250                           	psect	text0
   251  00760E                     __ptext0:
   252                           	opt callstack 0
   253  00760E                     _main:
   254                           	opt callstack 29
   255  00760E                     
   256                           ;newmain.c: 193:     initial();
   257  00760E  ECFF  F03C         	call	_initial	;wreg free
   258  007612                     
   259                           ;newmain.c: 194:     ADC_Initialize();
   260  007612  EC69  F03A         	call	_ADC_Initialize	;wreg free
   261  007616                     
   262                           ;newmain.c: 195:     TRISD =0;
   263  007616  0E00               	movlw	0
   264  007618  6E95               	movwf	149,c	;volatile
   265  00761A                     
   266                           ;newmain.c: 196:     LATD = 0;
   267  00761A  0E00               	movlw	0
   268  00761C  6E8C               	movwf	140,c	;volatile
   269  00761E                     
   270                           ;newmain.c: 197:     LATDbits.LATD3 = 1;
   271  00761E  868C               	bsf	140,3,c	;volatile
   272  007620                     l1320:
   273                           
   274                           ;newmain.c: 198:     int i = 0;
   275  007620  0E00               	movlw	0
   276  007622  6E2E               	movwf	(main@i+1)^0,c
   277  007624  0E00               	movlw	0
   278  007626  6E2D               	movwf	main@i^0,c
   279  007628                     l1322:
   280                           
   281                           ;newmain.c: 200:         int val = ADC_Read();
   282  007628  EC8A  F03A         	call	_ADC_Read	;wreg free
   283  00762C  C001  F02B         	movff	?_ADC_Read,main@val
   284  007630  C002  F02C         	movff	?_ADC_Read+1,main@val+1
   285  007634                     
   286                           ;newmain.c: 201:         rotate_r(val/300);
   287  007634  C02B  F001         	movff	main@val,___awdiv@dividend
   288  007638  C02C  F002         	movff	main@val+1,___awdiv@dividend+1
   289  00763C  0E01               	movlw	1
   290  00763E  6E04               	movwf	(___awdiv@divisor+1)^0,c
   291  007640  0E2C               	movlw	44
   292  007642  6E03               	movwf	___awdiv@divisor^0,c
   293  007644  ECA5  F03A         	call	___awdiv	;wreg free
   294  007648  C001  F009         	movff	?___awdiv,rotate_r@val
   295  00764C  C002  F00A         	movff	?___awdiv+1,rotate_r@val+1
   296  007650  ECB8  F03B         	call	_rotate_r	;wreg free
   297  007654                     
   298                           ;newmain.c: 202:         original_r = val/300;
   299  007654  C02B  F001         	movff	main@val,___awdiv@dividend
   300  007658  C02C  F002         	movff	main@val+1,___awdiv@dividend+1
   301  00765C  0E01               	movlw	1
   302  00765E  6E04               	movwf	(___awdiv@divisor+1)^0,c
   303  007660  0E2C               	movlw	44
   304  007662  6E03               	movwf	___awdiv@divisor^0,c
   305  007664  ECA5  F03A         	call	___awdiv	;wreg free
   306  007668  C001  F02F         	movff	?___awdiv,_original_r	;volatile
   307  00766C  C002  F030         	movff	?___awdiv+1,_original_r+1	;volatile
   308  007670                     
   309                           ;newmain.c: 203:         LATDbits.LATD0 = rgb[i].r;
   310  007670  C02D  F001         	movff	main@i,___wmul@multiplier
   311  007674  C02E  F002         	movff	main@i+1,___wmul@multiplier+1
   312  007678  0E00               	movlw	0
   313  00767A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   314  00767C  0E06               	movlw	6
   315  00767E  6E03               	movwf	___wmul@multiplicand^0,c
   316  007680  EC77  F03A         	call	___wmul	;wreg free
   317  007684  0E00               	movlw	low _rgb
   318  007686  2401               	addwf	?___wmul^0,w,c
   319  007688  6ED9               	movwf	fsr2l,c
   320  00768A  0E01               	movlw	high _rgb
   321  00768C  2002               	addwfc	(?___wmul+1)^0,w,c
   322  00768E  6EDA               	movwf	fsr2h,c
   323  007690  50DF               	movf	indf2,w,c
   324  007692  6E28               	movwf	??_main^0,c
   325  007694  508C               	movf	140,w,c	;volatile
   326  007696  1828               	xorwf	??_main^0,w,c
   327  007698  0BFE               	andlw	-2
   328  00769A  1828               	xorwf	??_main^0,w,c
   329  00769C  6E8C               	movwf	140,c	;volatile
   330  00769E                     
   331                           ;newmain.c: 204:         LATDbits.LATD1 = rgb[i].g;
   332  00769E  C02D  F001         	movff	main@i,___wmul@multiplier
   333  0076A2  C02E  F002         	movff	main@i+1,___wmul@multiplier+1
   334  0076A6  0E00               	movlw	0
   335  0076A8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   336  0076AA  0E06               	movlw	6
   337  0076AC  6E03               	movwf	___wmul@multiplicand^0,c
   338  0076AE  EC77  F03A         	call	___wmul	;wreg free
   339  0076B2  0E02               	movlw	low (_rgb+2)
   340  0076B4  2401               	addwf	?___wmul^0,w,c
   341  0076B6  6ED9               	movwf	fsr2l,c
   342  0076B8  0E01               	movlw	high (_rgb+2)
   343  0076BA  2002               	addwfc	(?___wmul+1)^0,w,c
   344  0076BC  6EDA               	movwf	fsr2h,c
   345  0076BE  50DF               	movf	indf2,w,c
   346  0076C0  6E28               	movwf	??_main^0,c
   347  0076C2  4628               	rlncf	??_main^0,f,c
   348  0076C4  508C               	movf	140,w,c	;volatile
   349  0076C6  1828               	xorwf	??_main^0,w,c
   350  0076C8  0BFD               	andlw	-3
   351  0076CA  1828               	xorwf	??_main^0,w,c
   352  0076CC  6E8C               	movwf	140,c	;volatile
   353  0076CE                     
   354                           ;newmain.c: 205:         LATDbits.LATD2 = rgb[i].b;
   355  0076CE  C02D  F001         	movff	main@i,___wmul@multiplier
   356  0076D2  C02E  F002         	movff	main@i+1,___wmul@multiplier+1
   357  0076D6  0E00               	movlw	0
   358  0076D8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   359  0076DA  0E06               	movlw	6
   360  0076DC  6E03               	movwf	___wmul@multiplicand^0,c
   361  0076DE  EC77  F03A         	call	___wmul	;wreg free
   362  0076E2  0E04               	movlw	low (_rgb+4)
   363  0076E4  2401               	addwf	?___wmul^0,w,c
   364  0076E6  6ED9               	movwf	fsr2l,c
   365  0076E8  0E01               	movlw	high (_rgb+4)
   366  0076EA  2002               	addwfc	(?___wmul+1)^0,w,c
   367  0076EC  6EDA               	movwf	fsr2h,c
   368  0076EE  50DF               	movf	indf2,w,c
   369  0076F0  6E28               	movwf	??_main^0,c
   370  0076F2  4628               	rlncf	??_main^0,f,c
   371  0076F4  4628               	rlncf	??_main^0,f,c
   372  0076F6  508C               	movf	140,w,c	;volatile
   373  0076F8  1828               	xorwf	??_main^0,w,c
   374  0076FA  0BFB               	andlw	-5
   375  0076FC  1828               	xorwf	??_main^0,w,c
   376  0076FE  6E8C               	movwf	140,c	;volatile
   377  007700                     
   378                           ;newmain.c: 206:         _delay((unsigned long)((50)*(20000000/4000000.0)));
   379  007700  0E53               	movlw	83
   380  007702                     u577:
   381  007702  2EE8               	decfsz	wreg,f,c
   382  007704  D7FE               	bra	u577
   383  007706  F000               	nop	
   384  007708                     
   385                           ;newmain.c: 207:         LATDbits.LATD0 = 1;
   386  007708  808C               	bsf	140,0,c	;volatile
   387  00770A                     
   388                           ;newmain.c: 208:         LATDbits.LATD1 = 1;
   389  00770A  828C               	bsf	140,1,c	;volatile
   390  00770C                     
   391                           ;newmain.c: 209:         LATDbits.LATD2 = 1;
   392  00770C  848C               	bsf	140,2,c	;volatile
   393  00770E                     
   394                           ;newmain.c: 210:         int temp = LATDbits.LATD6;
   395  00770E  BC8C               	btfsc	140,6,c	;volatile
   396  007710  EF8C  F03B         	goto	u511
   397  007714  EF90  F03B         	goto	u510
   398  007718                     u511:
   399  007718  6A28               	clrf	??_main^0,c
   400  00771A  2A28               	incf	??_main^0,f,c
   401  00771C  EF91  F03B         	goto	u518
   402  007720                     u510:
   403  007720  6A28               	clrf	??_main^0,c
   404  007722                     u518:
   405  007722  5028               	movf	??_main^0,w,c
   406  007724  6E29               	movwf	main@temp^0,c
   407  007726  6A2A               	clrf	(main@temp+1)^0,c
   408  007728                     
   409                           ;newmain.c: 211:         LATDbits.LATD6 = LATDbits.LATD5;
   410  007728  AA8C               	btfss	140,5,c	;volatile
   411  00772A  D002               	bra	u525
   412  00772C  8C8C               	bsf	140,6,c	;volatile
   413  00772E  D001               	bra	u527
   414  007730                     u525:
   415  007730  9C8C               	bcf	140,6,c	;volatile
   416  007732                     u527:
   417  007732                     
   418                           ;newmain.c: 212:         LATDbits.LATD5 = LATDbits.LATD4;
   419  007732  A88C               	btfss	140,4,c	;volatile
   420  007734  D002               	bra	u535
   421  007736  8A8C               	bsf	140,5,c	;volatile
   422  007738  D001               	bra	u537
   423  00773A                     u535:
   424  00773A  9A8C               	bcf	140,5,c	;volatile
   425  00773C                     u537:
   426  00773C                     
   427                           ;newmain.c: 213:         LATDbits.LATD4 = LATDbits.LATD3;
   428  00773C  A68C               	btfss	140,3,c	;volatile
   429  00773E  D002               	bra	u545
   430  007740  888C               	bsf	140,4,c	;volatile
   431  007742  D001               	bra	u547
   432  007744                     u545:
   433  007744  988C               	bcf	140,4,c	;volatile
   434  007746                     u547:
   435  007746                     
   436                           ;newmain.c: 214:         LATDbits.LATD3 = temp;
   437  007746  B029               	btfsc	main@temp^0,0,c
   438  007748  D002               	bra	u555
   439  00774A  968C               	bcf	140,3,c	;volatile
   440  00774C  D001               	bra	u556
   441  00774E                     u555:
   442  00774E  868C               	bsf	140,3,c	;volatile
   443  007750                     u556:
   444  007750                     
   445                           ;newmain.c: 215:         i++;
   446  007750  4A2D               	infsnz	main@i^0,f,c
   447  007752  2A2E               	incf	(main@i+1)^0,f,c
   448  007754                     
   449                           ;newmain.c: 216:         if(i == 4){
   450  007754  0E04               	movlw	4
   451  007756  182D               	xorwf	main@i^0,w,c
   452  007758  102E               	iorwf	(main@i+1)^0,w,c
   453  00775A  A4D8               	btfss	status,2,c
   454  00775C  EFB2  F03B         	goto	u561
   455  007760  EFB4  F03B         	goto	u560
   456  007764                     u561:
   457  007764  EF14  F03B         	goto	l1322
   458  007768                     u560:
   459  007768  EF10  F03B         	goto	l1320
   460  00776C  EF00  F000         	goto	start
   461  007770                     __end_of_main:
   462                           	opt callstack 0
   463                           
   464 ;; *************** function _rotate_r *****************
   465 ;; Defined at:
   466 ;;		line 128 in file "newmain.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  val             2    8[COMRAM] int 
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  tempd           6   33[COMRAM] struct RGB
   471 ;;  tempc           6   27[COMRAM] struct RGB
   472 ;;  tempb           6   21[COMRAM] struct RGB
   473 ;;  tempa           6   15[COMRAM] struct RGB
   474 ;;  buf             2   13[COMRAM] int 
   475 ;;  buf             2   11[COMRAM] int 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   485 ;;      Params:         2       0       0       0       0       0       0
   486 ;;      Locals:        28       0       0       0       0       0       0
   487 ;;      Temps:          1       0       0       0       0       0       0
   488 ;;      Totals:        31       0       0       0       0       0       0
   489 ;;Total ram usage:       31 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; This function calls:
   492 ;;		Nothing
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text1
   499  007770                     __ptext1:
   500                           	opt callstack 0
   501  007770                     _rotate_r:
   502                           	opt callstack 30
   503  007770                     
   504                           ;newmain.c: 129:     if(val > 3){
   505  007770  BE0A               	btfsc	(rotate_r@val+1)^0,7,c
   506  007772  EFC4  F03B         	goto	u361
   507  007776  500A               	movf	(rotate_r@val+1)^0,w,c
   508  007778  E109               	bnz	u360
   509  00777A  0E04               	movlw	4
   510  00777C  5C09               	subwf	rotate_r@val^0,w,c
   511  00777E  A0D8               	btfss	status,0,c
   512  007780  EFC4  F03B         	goto	u361
   513  007784  EFC6  F03B         	goto	u360
   514  007788                     u361:
   515  007788  EFCA  F03B         	goto	l1150
   516  00778C                     u360:
   517  00778C                     
   518                           ;newmain.c: 130:         val = 3;
   519  00778C  0E00               	movlw	0
   520  00778E  6E0A               	movwf	(rotate_r@val+1)^0,c
   521  007790  0E03               	movlw	3
   522  007792  6E09               	movwf	rotate_r@val^0,c
   523  007794                     l1150:
   524                           
   525                           ;newmain.c: 132:     if(val>original_r){
   526  007794  5009               	movf	rotate_r@val^0,w,c
   527  007796  5C2F               	subwf	_original_r^0,w,c	;volatile
   528  007798  5030               	movf	(_original_r+1)^0,w,c	;volatile
   529  00779A  0A80               	xorlw	128
   530  00779C  6E0B               	movwf	??_rotate_r^0,c
   531  00779E  500A               	movf	(rotate_r@val+1)^0,w,c
   532  0077A0  0A80               	xorlw	128
   533  0077A2  580B               	subwfb	??_rotate_r^0,w,c
   534  0077A4  B0D8               	btfsc	status,0,c
   535  0077A6  EFD7  F03B         	goto	u371
   536  0077AA  EFD9  F03B         	goto	u370
   537  0077AE                     u371:
   538  0077AE  EF65  F03C         	goto	l1208
   539  0077B2                     u370:
   540  0077B2                     
   541                           ;newmain.c: 133:         int buf = val-original_r;
   542  0077B2  502F               	movf	_original_r^0,w,c	;volatile
   543  0077B4  5C09               	subwf	rotate_r@val^0,w,c
   544  0077B6  6E0C               	movwf	rotate_r@buf^0,c
   545  0077B8  5030               	movf	(_original_r+1)^0,w,c	;volatile
   546  0077BA  580A               	subwfb	(rotate_r@val+1)^0,w,c
   547  0077BC  6E0D               	movwf	(rotate_r@buf+1)^0,c
   548                           
   549                           ;newmain.c: 134:         while(buf>0){
   550  0077BE  EF56  F03C         	goto	l1206
   551  0077C2                     l1154:
   552                           
   553                           ;newmain.c: 135:             rgbarray tempa = rgb[2];
   554  0077C2  EE21  F00C         	lfsr	2,_rgb+12	;volatile
   555  0077C6  EE10  F010         	lfsr	1,rotate_r@tempa
   556  0077CA  0E05               	movlw	5
   557  0077CC                     u381:
   558  0077CC  CFDB FFE3          	movff	plusw2,plusw1
   559  0077D0  06E8               	decf	wreg,f,c
   560  0077D2  E2FC               	bc	u381
   561                           
   562                           ;newmain.c: 136:             rgbarray tempb = rgb[3];
   563  0077D4  EE21  F012         	lfsr	2,_rgb+18	;volatile
   564  0077D8  EE10  F016         	lfsr	1,rotate_r@tempb
   565  0077DC  0E05               	movlw	5
   566  0077DE                     u391:
   567  0077DE  CFDB FFE3          	movff	plusw2,plusw1
   568  0077E2  06E8               	decf	wreg,f,c
   569  0077E4  E2FC               	bc	u391
   570  0077E6                     
   571                           ;newmain.c: 137:             rgb[2].r = rgb[6].r;rgb[3].r = rgb[7].r;
   572  0077E6  C124  F10C         	movff	_rgb+36,_rgb+12	;volatile
   573  0077EA  C125  F10D         	movff	_rgb+37,_rgb+13	;volatile
   574  0077EE  C12A  F112         	movff	_rgb+42,_rgb+18	;volatile
   575  0077F2  C12B  F113         	movff	_rgb+43,_rgb+19	;volatile
   576  0077F6                     
   577                           ;newmain.c: 138:             rgb[2].g = rgb[6].g;rgb[3].g = rgb[7].g;
   578  0077F6  C126  F10E         	movff	_rgb+38,_rgb+14	;volatile
   579  0077FA  C127  F10F         	movff	_rgb+39,_rgb+15	;volatile
   580  0077FE  C12C  F114         	movff	_rgb+44,_rgb+20	;volatile
   581  007802  C12D  F115         	movff	_rgb+45,_rgb+21	;volatile
   582  007806                     
   583                           ;newmain.c: 139:             rgb[2].b = rgb[6].b;rgb[3].b = rgb[7].b;
   584  007806  C128  F110         	movff	_rgb+40,_rgb+16	;volatile
   585  00780A  C129  F111         	movff	_rgb+41,_rgb+17	;volatile
   586  00780E  C12E  F116         	movff	_rgb+46,_rgb+22	;volatile
   587  007812  C12F  F117         	movff	_rgb+47,_rgb+23	;volatile
   588  007816                     
   589                           ;newmain.c: 140:             rgb[6].r = rgb[10].r;rgb[7].r = rgb[11].r;
   590  007816  C13C  F124         	movff	_rgb+60,_rgb+36	;volatile
   591  00781A  C13D  F125         	movff	_rgb+61,_rgb+37	;volatile
   592  00781E  C142  F12A         	movff	_rgb+66,_rgb+42	;volatile
   593  007822  C143  F12B         	movff	_rgb+67,_rgb+43	;volatile
   594  007826                     
   595                           ;newmain.c: 141:             rgb[6].g = rgb[10].g;rgb[7].g = rgb[11].g;
   596  007826  C13E  F126         	movff	_rgb+62,_rgb+38	;volatile
   597  00782A  C13F  F127         	movff	_rgb+63,_rgb+39	;volatile
   598  00782E  C144  F12C         	movff	_rgb+68,_rgb+44	;volatile
   599  007832  C145  F12D         	movff	_rgb+69,_rgb+45	;volatile
   600  007836                     
   601                           ;newmain.c: 142:             rgb[6].b = rgb[10].b;rgb[7].b = rgb[11].b;
   602  007836  C140  F128         	movff	_rgb+64,_rgb+40	;volatile
   603  00783A  C141  F129         	movff	_rgb+65,_rgb+41	;volatile
   604  00783E  C146  F12E         	movff	_rgb+70,_rgb+46	;volatile
   605  007842  C147  F12F         	movff	_rgb+71,_rgb+47	;volatile
   606  007846                     
   607                           ;newmain.c: 143:             rgb[10].r = rgb[14].r;rgb[11].r = rgb[15].r;
   608  007846  C154  F13C         	movff	_rgb+84,_rgb+60	;volatile
   609  00784A  C155  F13D         	movff	_rgb+85,_rgb+61	;volatile
   610  00784E  C15A  F142         	movff	_rgb+90,_rgb+66	;volatile
   611  007852  C15B  F143         	movff	_rgb+91,_rgb+67	;volatile
   612  007856                     
   613                           ;newmain.c: 144:             rgb[10].g = rgb[14].g;rgb[11].g = rgb[15].g;
   614  007856  C156  F13E         	movff	_rgb+86,_rgb+62	;volatile
   615  00785A  C157  F13F         	movff	_rgb+87,_rgb+63	;volatile
   616  00785E  C15C  F144         	movff	_rgb+92,_rgb+68	;volatile
   617  007862  C15D  F145         	movff	_rgb+93,_rgb+69	;volatile
   618  007866                     
   619                           ;newmain.c: 145:             rgb[10].b = rgb[14].b;rgb[11].b = rgb[15].b;
   620  007866  C158  F140         	movff	_rgb+88,_rgb+64	;volatile
   621  00786A  C159  F141         	movff	_rgb+89,_rgb+65	;volatile
   622  00786E  C15E  F146         	movff	_rgb+94,_rgb+70	;volatile
   623  007872  C15F  F147         	movff	_rgb+95,_rgb+71	;volatile
   624  007876                     
   625                           ;newmain.c: 146:             rgb[14].r = tempa.r;rgb[15].r = tempb.r;
   626  007876  C010  F154         	movff	rotate_r@tempa,_rgb+84	;volatile
   627  00787A  C011  F155         	movff	rotate_r@tempa+1,_rgb+85	;volatile
   628  00787E  C016  F15A         	movff	rotate_r@tempb,_rgb+90	;volatile
   629  007882  C017  F15B         	movff	rotate_r@tempb+1,_rgb+91	;volatile
   630  007886                     
   631                           ;newmain.c: 147:             rgb[14].g = tempa.g;rgb[15].g = tempb.g;
   632  007886  C012  F156         	movff	rotate_r@tempa+2,_rgb+86	;volatile
   633  00788A  C013  F157         	movff	rotate_r@tempa+3,_rgb+87	;volatile
   634  00788E  C018  F15C         	movff	rotate_r@tempb+2,_rgb+92	;volatile
   635  007892  C019  F15D         	movff	rotate_r@tempb+3,_rgb+93	;volatile
   636  007896                     
   637                           ;newmain.c: 148:             rgb[14].b = tempa.b;rgb[15].b = tempb.b;
   638  007896  C014  F158         	movff	rotate_r@tempa+4,_rgb+88	;volatile
   639  00789A  C015  F159         	movff	rotate_r@tempa+5,_rgb+89	;volatile
   640  00789E  C01A  F15E         	movff	rotate_r@tempb+4,_rgb+94	;volatile
   641  0078A2  C01B  F15F         	movff	rotate_r@tempb+5,_rgb+95	;volatile
   642  0078A6                     
   643                           ;newmain.c: 149:             buf--;
   644  0078A6  060C               	decf	rotate_r@buf^0,f,c
   645  0078A8  A0D8               	btfss	status,0,c
   646  0078AA  060D               	decf	(rotate_r@buf+1)^0,f,c
   647  0078AC                     l1206:
   648                           
   649                           ;newmain.c: 134:         while(buf>0){
   650  0078AC  BE0D               	btfsc	(rotate_r@buf+1)^0,7,c
   651  0078AE  EF63  F03C         	goto	u400
   652  0078B2  500D               	movf	(rotate_r@buf+1)^0,w,c
   653  0078B4  E106               	bnz	u401
   654  0078B6  040C               	decf	rotate_r@buf^0,w,c
   655  0078B8  B0D8               	btfsc	status,0,c
   656  0078BA  EF61  F03C         	goto	u401
   657  0078BE  EF63  F03C         	goto	u400
   658  0078C2                     u401:
   659  0078C2  EFE1  F03B         	goto	l1154
   660  0078C6                     u400:
   661  0078C6  EFFE  F03C         	goto	l65
   662  0078CA                     l1208:
   663  0078CA  502F               	movf	_original_r^0,w,c	;volatile
   664  0078CC  5C09               	subwf	rotate_r@val^0,w,c
   665  0078CE  500A               	movf	(rotate_r@val+1)^0,w,c
   666  0078D0  0A80               	xorlw	128
   667  0078D2  6E0B               	movwf	??_rotate_r^0,c
   668  0078D4  5030               	movf	(_original_r+1)^0,w,c	;volatile
   669  0078D6  0A80               	xorlw	128
   670  0078D8  580B               	subwfb	??_rotate_r^0,w,c
   671  0078DA  B0D8               	btfsc	status,0,c
   672  0078DC  EF72  F03C         	goto	u411
   673  0078E0  EF74  F03C         	goto	u410
   674  0078E4                     u411:
   675  0078E4  EFFE  F03C         	goto	l65
   676  0078E8                     u410:
   677  0078E8                     
   678                           ;newmain.c: 153:         int buf = original_r-val;
   679  0078E8  5009               	movf	rotate_r@val^0,w,c
   680  0078EA  5C2F               	subwf	_original_r^0,w,c	;volatile
   681  0078EC  6E0E               	movwf	rotate_r@buf_212^0,c
   682  0078EE  500A               	movf	(rotate_r@val+1)^0,w,c
   683  0078F0  5830               	subwfb	(_original_r+1)^0,w,c	;volatile
   684  0078F2  6E0F               	movwf	(rotate_r@buf_212+1)^0,c
   685                           
   686                           ;newmain.c: 172:         while(buf>0){
   687  0078F4  EFF1  F03C         	goto	l1264
   688  0078F8                     l1212:
   689                           
   690                           ;newmain.c: 173:             rgbarray tempc = rgb[14];
   691  0078F8  EE21  F054         	lfsr	2,_rgb+84	;volatile
   692  0078FC  EE10  F01C         	lfsr	1,rotate_r@tempc
   693  007900  0E05               	movlw	5
   694  007902                     u421:
   695  007902  CFDB FFE3          	movff	plusw2,plusw1
   696  007906  06E8               	decf	wreg,f,c
   697  007908  E2FC               	bc	u421
   698                           
   699                           ;newmain.c: 174:             rgbarray tempd = rgb[15];
   700  00790A  EE21  F05A         	lfsr	2,_rgb+90	;volatile
   701  00790E  EE10  F022         	lfsr	1,rotate_r@tempd
   702  007912  0E05               	movlw	5
   703  007914                     u431:
   704  007914  CFDB FFE3          	movff	plusw2,plusw1
   705  007918  06E8               	decf	wreg,f,c
   706  00791A  E2FC               	bc	u431
   707  00791C                     
   708                           ;newmain.c: 175:             rgb[14].r = rgb[10].r;rgb[15].r = rgb[11].r;
   709  00791C  C13C  F154         	movff	_rgb+60,_rgb+84	;volatile
   710  007920  C13D  F155         	movff	_rgb+61,_rgb+85	;volatile
   711  007924  C142  F15A         	movff	_rgb+66,_rgb+90	;volatile
   712  007928  C143  F15B         	movff	_rgb+67,_rgb+91	;volatile
   713  00792C                     
   714                           ;newmain.c: 176:             rgb[14].g = rgb[10].g;rgb[15].g = rgb[11].g;
   715  00792C  C13E  F156         	movff	_rgb+62,_rgb+86	;volatile
   716  007930  C13F  F157         	movff	_rgb+63,_rgb+87	;volatile
   717  007934  C144  F15C         	movff	_rgb+68,_rgb+92	;volatile
   718  007938  C145  F15D         	movff	_rgb+69,_rgb+93	;volatile
   719  00793C                     
   720                           ;newmain.c: 177:             rgb[14].b = rgb[10].b;rgb[15].b = rgb[11].b;
   721  00793C  C140  F158         	movff	_rgb+64,_rgb+88	;volatile
   722  007940  C141  F159         	movff	_rgb+65,_rgb+89	;volatile
   723  007944  C146  F15E         	movff	_rgb+70,_rgb+94	;volatile
   724  007948  C147  F15F         	movff	_rgb+71,_rgb+95	;volatile
   725  00794C                     
   726                           ;newmain.c: 178:             rgb[10].r = rgb[6].r;rgb[11].r = rgb[7].r;
   727  00794C  C124  F13C         	movff	_rgb+36,_rgb+60	;volatile
   728  007950  C125  F13D         	movff	_rgb+37,_rgb+61	;volatile
   729  007954  C12A  F142         	movff	_rgb+42,_rgb+66	;volatile
   730  007958  C12B  F143         	movff	_rgb+43,_rgb+67	;volatile
   731  00795C                     
   732                           ;newmain.c: 179:             rgb[10].g = rgb[6].g;rgb[11].g = rgb[7].g;
   733  00795C  C126  F13E         	movff	_rgb+38,_rgb+62	;volatile
   734  007960  C127  F13F         	movff	_rgb+39,_rgb+63	;volatile
   735  007964  C12C  F144         	movff	_rgb+44,_rgb+68	;volatile
   736  007968  C12D  F145         	movff	_rgb+45,_rgb+69	;volatile
   737  00796C                     
   738                           ;newmain.c: 180:             rgb[10].b = rgb[6].b;rgb[11].b = rgb[7].b;
   739  00796C  C128  F140         	movff	_rgb+40,_rgb+64	;volatile
   740  007970  C129  F141         	movff	_rgb+41,_rgb+65	;volatile
   741  007974  C12E  F146         	movff	_rgb+46,_rgb+70	;volatile
   742  007978  C12F  F147         	movff	_rgb+47,_rgb+71	;volatile
   743  00797C                     
   744                           ;newmain.c: 181:             rgb[6].r = rgb[2].r;rgb[7].r = rgb[3].r;
   745  00797C  C10C  F124         	movff	_rgb+12,_rgb+36	;volatile
   746  007980  C10D  F125         	movff	_rgb+13,_rgb+37	;volatile
   747  007984  C112  F12A         	movff	_rgb+18,_rgb+42	;volatile
   748  007988  C113  F12B         	movff	_rgb+19,_rgb+43	;volatile
   749  00798C                     
   750                           ;newmain.c: 182:             rgb[6].g = rgb[2].g;rgb[7].g = rgb[3].g;
   751  00798C  C10E  F126         	movff	_rgb+14,_rgb+38	;volatile
   752  007990  C10F  F127         	movff	_rgb+15,_rgb+39	;volatile
   753  007994  C114  F12C         	movff	_rgb+20,_rgb+44	;volatile
   754  007998  C115  F12D         	movff	_rgb+21,_rgb+45	;volatile
   755  00799C                     
   756                           ;newmain.c: 183:             rgb[6].b = rgb[2].b;rgb[7].b = rgb[3].b;
   757  00799C  C110  F128         	movff	_rgb+16,_rgb+40	;volatile
   758  0079A0  C111  F129         	movff	_rgb+17,_rgb+41	;volatile
   759  0079A4  C116  F12E         	movff	_rgb+22,_rgb+46	;volatile
   760  0079A8  C117  F12F         	movff	_rgb+23,_rgb+47	;volatile
   761  0079AC                     
   762                           ;newmain.c: 184:             rgb[2].r = tempc.r;rgb[3].r = tempd.r;
   763  0079AC  C01C  F10C         	movff	rotate_r@tempc,_rgb+12	;volatile
   764  0079B0  C01D  F10D         	movff	rotate_r@tempc+1,_rgb+13	;volatile
   765  0079B4  C022  F112         	movff	rotate_r@tempd,_rgb+18	;volatile
   766  0079B8  C023  F113         	movff	rotate_r@tempd+1,_rgb+19	;volatile
   767  0079BC                     
   768                           ;newmain.c: 185:             rgb[2].g = tempc.g;rgb[3].g = tempd.g;
   769  0079BC  C01E  F10E         	movff	rotate_r@tempc+2,_rgb+14	;volatile
   770  0079C0  C01F  F10F         	movff	rotate_r@tempc+3,_rgb+15	;volatile
   771  0079C4  C024  F114         	movff	rotate_r@tempd+2,_rgb+20	;volatile
   772  0079C8  C025  F115         	movff	rotate_r@tempd+3,_rgb+21	;volatile
   773  0079CC                     
   774                           ;newmain.c: 186:             rgb[2].b = tempc.b;rgb[3].b = tempd.b;
   775  0079CC  C020  F110         	movff	rotate_r@tempc+4,_rgb+16	;volatile
   776  0079D0  C021  F111         	movff	rotate_r@tempc+5,_rgb+17	;volatile
   777  0079D4  C026  F116         	movff	rotate_r@tempd+4,_rgb+22	;volatile
   778  0079D8  C027  F117         	movff	rotate_r@tempd+5,_rgb+23	;volatile
   779  0079DC                     
   780                           ;newmain.c: 187:             buf--;
   781  0079DC  060E               	decf	rotate_r@buf_212^0,f,c
   782  0079DE  A0D8               	btfss	status,0,c
   783  0079E0  060F               	decf	(rotate_r@buf_212+1)^0,f,c
   784  0079E2                     l1264:
   785                           
   786                           ;newmain.c: 172:         while(buf>0){
   787  0079E2  BE0F               	btfsc	(rotate_r@buf_212+1)^0,7,c
   788  0079E4  EFFE  F03C         	goto	u440
   789  0079E8  500F               	movf	(rotate_r@buf_212+1)^0,w,c
   790  0079EA  E106               	bnz	u441
   791  0079EC  040E               	decf	rotate_r@buf_212^0,w,c
   792  0079EE  B0D8               	btfsc	status,0,c
   793  0079F0  EFFC  F03C         	goto	u441
   794  0079F4  EFFE  F03C         	goto	u440
   795  0079F8                     u441:
   796  0079F8  EF7C  F03C         	goto	l1212
   797  0079FC                     u440:
   798  0079FC                     l65:
   799  0079FC  0012               	return		;funcret
   800  0079FE                     __end_of_rotate_r:
   801                           	opt callstack 0
   802                           
   803 ;; *************** function _initial *****************
   804 ;; Defined at:
   805 ;;		line 95 in file "newmain.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  i               2    6[COMRAM] int 
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   819 ;;      Params:         0       0       0       0       0       0       0
   820 ;;      Locals:         2       0       0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0
   822 ;;      Totals:         2       0       0       0       0       0       0
   823 ;;Total ram usage:        2 bytes
   824 ;; Hardware stack levels used:    1
   825 ;; Hardware stack levels required when called:    1
   826 ;; This function calls:
   827 ;;		___wmul
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text2
   834  0079FE                     __ptext2:
   835                           	opt callstack 0
   836  0079FE                     _initial:
   837                           	opt callstack 29
   838  0079FE                     
   839                           ;newmain.c: 96:     int i;;newmain.c: 97:     for(i = 0;i < 4;i++){
   840  0079FE  0E00               	movlw	0
   841  007A00  6E08               	movwf	(initial@i+1)^0,c
   842  007A02  0E00               	movlw	0
   843  007A04  6E07               	movwf	initial@i^0,c
   844  007A06                     l1080:
   845                           
   846                           ;newmain.c: 98:         rgb[i].r = 0;
   847  007A06  C007  F001         	movff	initial@i,___wmul@multiplier
   848  007A0A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
   849  007A0E  0E00               	movlw	0
   850  007A10  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   851  007A12  0E06               	movlw	6
   852  007A14  6E03               	movwf	___wmul@multiplicand^0,c
   853  007A16  EC77  F03A         	call	___wmul	;wreg free
   854  007A1A  0E00               	movlw	low _rgb
   855  007A1C  2401               	addwf	?___wmul^0,w,c
   856  007A1E  6ED9               	movwf	fsr2l,c
   857  007A20  0E01               	movlw	high _rgb
   858  007A22  2002               	addwfc	(?___wmul+1)^0,w,c
   859  007A24  6EDA               	movwf	fsr2h,c
   860  007A26  0E00               	movlw	0
   861  007A28  6EDE               	movwf	postinc2,c
   862  007A2A  0E00               	movlw	0
   863  007A2C  6EDD               	movwf	postdec2,c
   864                           
   865                           ;newmain.c: 99:         rgb[i].g = 1;
   866  007A2E  C007  F001         	movff	initial@i,___wmul@multiplier
   867  007A32  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
   868  007A36  0E00               	movlw	0
   869  007A38  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   870  007A3A  0E06               	movlw	6
   871  007A3C  6E03               	movwf	___wmul@multiplicand^0,c
   872  007A3E  EC77  F03A         	call	___wmul	;wreg free
   873  007A42  0E02               	movlw	low (_rgb+2)
   874  007A44  2401               	addwf	?___wmul^0,w,c
   875  007A46  6ED9               	movwf	fsr2l,c
   876  007A48  0E01               	movlw	high (_rgb+2)
   877  007A4A  2002               	addwfc	(?___wmul+1)^0,w,c
   878  007A4C  6EDA               	movwf	fsr2h,c
   879  007A4E  0E01               	movlw	1
   880  007A50  6EDE               	movwf	postinc2,c
   881  007A52  0E00               	movlw	0
   882  007A54  6EDD               	movwf	postdec2,c
   883                           
   884                           ;newmain.c: 100:         rgb[i].b = 1;
   885  007A56  C007  F001         	movff	initial@i,___wmul@multiplier
   886  007A5A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
   887  007A5E  0E00               	movlw	0
   888  007A60  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   889  007A62  0E06               	movlw	6
   890  007A64  6E03               	movwf	___wmul@multiplicand^0,c
   891  007A66  EC77  F03A         	call	___wmul	;wreg free
   892  007A6A  0E04               	movlw	low (_rgb+4)
   893  007A6C  2401               	addwf	?___wmul^0,w,c
   894  007A6E  6ED9               	movwf	fsr2l,c
   895  007A70  0E01               	movlw	high (_rgb+4)
   896  007A72  2002               	addwfc	(?___wmul+1)^0,w,c
   897  007A74  6EDA               	movwf	fsr2h,c
   898  007A76  0E01               	movlw	1
   899  007A78  6EDE               	movwf	postinc2,c
   900  007A7A  0E00               	movlw	0
   901  007A7C  6EDD               	movwf	postdec2,c
   902  007A7E                     
   903                           ;newmain.c: 101:     }
   904  007A7E  4A07               	infsnz	initial@i^0,f,c
   905  007A80  2A08               	incf	(initial@i+1)^0,f,c
   906  007A82  BE08               	btfsc	(initial@i+1)^0,7,c
   907  007A84  EF4D  F03D         	goto	u301
   908  007A88  5008               	movf	(initial@i+1)^0,w,c
   909  007A8A  E109               	bnz	u300
   910  007A8C  0E04               	movlw	4
   911  007A8E  5C07               	subwf	initial@i^0,w,c
   912  007A90  A0D8               	btfss	status,0,c
   913  007A92  EF4D  F03D         	goto	u301
   914  007A96  EF4F  F03D         	goto	u300
   915  007A9A                     u301:
   916  007A9A  EF03  F03D         	goto	l1080
   917  007A9E                     u300:
   918  007A9E                     
   919                           ;newmain.c: 102:     for(i = 4;i < 8;i++){
   920  007A9E  0E00               	movlw	0
   921  007AA0  6E08               	movwf	(initial@i+1)^0,c
   922  007AA2  0E04               	movlw	4
   923  007AA4  6E07               	movwf	initial@i^0,c
   924  007AA6                     l1092:
   925                           
   926                           ;newmain.c: 103:         rgb[i].r = 1;
   927  007AA6  C007  F001         	movff	initial@i,___wmul@multiplier
   928  007AAA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
   929  007AAE  0E00               	movlw	0
   930  007AB0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   931  007AB2  0E06               	movlw	6
   932  007AB4  6E03               	movwf	___wmul@multiplicand^0,c
   933  007AB6  EC77  F03A         	call	___wmul	;wreg free
   934  007ABA  0E00               	movlw	low _rgb
   935  007ABC  2401               	addwf	?___wmul^0,w,c
   936  007ABE  6ED9               	movwf	fsr2l,c
   937  007AC0  0E01               	movlw	high _rgb
   938  007AC2  2002               	addwfc	(?___wmul+1)^0,w,c
   939  007AC4  6EDA               	movwf	fsr2h,c
   940  007AC6  0E01               	movlw	1
   941  007AC8  6EDE               	movwf	postinc2,c
   942  007ACA  0E00               	movlw	0
   943  007ACC  6EDD               	movwf	postdec2,c
   944                           
   945                           ;newmain.c: 104:         rgb[i].g = 0;
   946  007ACE  C007  F001         	movff	initial@i,___wmul@multiplier
   947  007AD2  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
   948  007AD6  0E00               	movlw	0
   949  007AD8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   950  007ADA  0E06               	movlw	6
   951  007ADC  6E03               	movwf	___wmul@multiplicand^0,c
   952  007ADE  EC77  F03A         	call	___wmul	;wreg free
   953  007AE2  0E02               	movlw	low (_rgb+2)
   954  007AE4  2401               	addwf	?___wmul^0,w,c
   955  007AE6  6ED9               	movwf	fsr2l,c
   956  007AE8  0E01               	movlw	high (_rgb+2)
   957  007AEA  2002               	addwfc	(?___wmul+1)^0,w,c
   958  007AEC  6EDA               	movwf	fsr2h,c
   959  007AEE  0E00               	movlw	0
   960  007AF0  6EDE               	movwf	postinc2,c
   961  007AF2  0E00               	movlw	0
   962  007AF4  6EDD               	movwf	postdec2,c
   963                           
   964                           ;newmain.c: 105:         rgb[i].b = 1;
   965  007AF6  C007  F001         	movff	initial@i,___wmul@multiplier
   966  007AFA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
   967  007AFE  0E00               	movlw	0
   968  007B00  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   969  007B02  0E06               	movlw	6
   970  007B04  6E03               	movwf	___wmul@multiplicand^0,c
   971  007B06  EC77  F03A         	call	___wmul	;wreg free
   972  007B0A  0E04               	movlw	low (_rgb+4)
   973  007B0C  2401               	addwf	?___wmul^0,w,c
   974  007B0E  6ED9               	movwf	fsr2l,c
   975  007B10  0E01               	movlw	high (_rgb+4)
   976  007B12  2002               	addwfc	(?___wmul+1)^0,w,c
   977  007B14  6EDA               	movwf	fsr2h,c
   978  007B16  0E01               	movlw	1
   979  007B18  6EDE               	movwf	postinc2,c
   980  007B1A  0E00               	movlw	0
   981  007B1C  6EDD               	movwf	postdec2,c
   982  007B1E                     
   983                           ;newmain.c: 106:     }
   984  007B1E  4A07               	infsnz	initial@i^0,f,c
   985  007B20  2A08               	incf	(initial@i+1)^0,f,c
   986  007B22  BE08               	btfsc	(initial@i+1)^0,7,c
   987  007B24  EF9D  F03D         	goto	u311
   988  007B28  5008               	movf	(initial@i+1)^0,w,c
   989  007B2A  E109               	bnz	u310
   990  007B2C  0E08               	movlw	8
   991  007B2E  5C07               	subwf	initial@i^0,w,c
   992  007B30  A0D8               	btfss	status,0,c
   993  007B32  EF9D  F03D         	goto	u311
   994  007B36  EF9F  F03D         	goto	u310
   995  007B3A                     u311:
   996  007B3A  EF53  F03D         	goto	l1092
   997  007B3E                     u310:
   998  007B3E                     
   999                           ;newmain.c: 107:     for(i = 8;i < 12;i++){
  1000  007B3E  0E00               	movlw	0
  1001  007B40  6E08               	movwf	(initial@i+1)^0,c
  1002  007B42  0E08               	movlw	8
  1003  007B44  6E07               	movwf	initial@i^0,c
  1004  007B46                     l1104:
  1005                           
  1006                           ;newmain.c: 108:         rgb[i].r = 1;
  1007  007B46  C007  F001         	movff	initial@i,___wmul@multiplier
  1008  007B4A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1009  007B4E  0E00               	movlw	0
  1010  007B50  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1011  007B52  0E06               	movlw	6
  1012  007B54  6E03               	movwf	___wmul@multiplicand^0,c
  1013  007B56  EC77  F03A         	call	___wmul	;wreg free
  1014  007B5A  0E00               	movlw	low _rgb
  1015  007B5C  2401               	addwf	?___wmul^0,w,c
  1016  007B5E  6ED9               	movwf	fsr2l,c
  1017  007B60  0E01               	movlw	high _rgb
  1018  007B62  2002               	addwfc	(?___wmul+1)^0,w,c
  1019  007B64  6EDA               	movwf	fsr2h,c
  1020  007B66  0E01               	movlw	1
  1021  007B68  6EDE               	movwf	postinc2,c
  1022  007B6A  0E00               	movlw	0
  1023  007B6C  6EDD               	movwf	postdec2,c
  1024                           
  1025                           ;newmain.c: 109:         rgb[i].g = 1;
  1026  007B6E  C007  F001         	movff	initial@i,___wmul@multiplier
  1027  007B72  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1028  007B76  0E00               	movlw	0
  1029  007B78  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1030  007B7A  0E06               	movlw	6
  1031  007B7C  6E03               	movwf	___wmul@multiplicand^0,c
  1032  007B7E  EC77  F03A         	call	___wmul	;wreg free
  1033  007B82  0E02               	movlw	low (_rgb+2)
  1034  007B84  2401               	addwf	?___wmul^0,w,c
  1035  007B86  6ED9               	movwf	fsr2l,c
  1036  007B88  0E01               	movlw	high (_rgb+2)
  1037  007B8A  2002               	addwfc	(?___wmul+1)^0,w,c
  1038  007B8C  6EDA               	movwf	fsr2h,c
  1039  007B8E  0E01               	movlw	1
  1040  007B90  6EDE               	movwf	postinc2,c
  1041  007B92  0E00               	movlw	0
  1042  007B94  6EDD               	movwf	postdec2,c
  1043                           
  1044                           ;newmain.c: 110:         rgb[i].b = 0;
  1045  007B96  C007  F001         	movff	initial@i,___wmul@multiplier
  1046  007B9A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1047  007B9E  0E00               	movlw	0
  1048  007BA0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1049  007BA2  0E06               	movlw	6
  1050  007BA4  6E03               	movwf	___wmul@multiplicand^0,c
  1051  007BA6  EC77  F03A         	call	___wmul	;wreg free
  1052  007BAA  0E04               	movlw	low (_rgb+4)
  1053  007BAC  2401               	addwf	?___wmul^0,w,c
  1054  007BAE  6ED9               	movwf	fsr2l,c
  1055  007BB0  0E01               	movlw	high (_rgb+4)
  1056  007BB2  2002               	addwfc	(?___wmul+1)^0,w,c
  1057  007BB4  6EDA               	movwf	fsr2h,c
  1058  007BB6  0E00               	movlw	0
  1059  007BB8  6EDE               	movwf	postinc2,c
  1060  007BBA  0E00               	movlw	0
  1061  007BBC  6EDD               	movwf	postdec2,c
  1062  007BBE                     
  1063                           ;newmain.c: 111:     }
  1064  007BBE  4A07               	infsnz	initial@i^0,f,c
  1065  007BC0  2A08               	incf	(initial@i+1)^0,f,c
  1066  007BC2  BE08               	btfsc	(initial@i+1)^0,7,c
  1067  007BC4  EFED  F03D         	goto	u321
  1068  007BC8  5008               	movf	(initial@i+1)^0,w,c
  1069  007BCA  E109               	bnz	u320
  1070  007BCC  0E0C               	movlw	12
  1071  007BCE  5C07               	subwf	initial@i^0,w,c
  1072  007BD0  A0D8               	btfss	status,0,c
  1073  007BD2  EFED  F03D         	goto	u321
  1074  007BD6  EFEF  F03D         	goto	u320
  1075  007BDA                     u321:
  1076  007BDA  EFA3  F03D         	goto	l1104
  1077  007BDE                     u320:
  1078  007BDE                     
  1079                           ;newmain.c: 112:     for(i = 12;i < 16;i++){
  1080  007BDE  0E00               	movlw	0
  1081  007BE0  6E08               	movwf	(initial@i+1)^0,c
  1082  007BE2  0E0C               	movlw	12
  1083  007BE4  6E07               	movwf	initial@i^0,c
  1084  007BE6                     l1116:
  1085                           
  1086                           ;newmain.c: 113:         rgb[i].r = 0;
  1087  007BE6  C007  F001         	movff	initial@i,___wmul@multiplier
  1088  007BEA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1089  007BEE  0E00               	movlw	0
  1090  007BF0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1091  007BF2  0E06               	movlw	6
  1092  007BF4  6E03               	movwf	___wmul@multiplicand^0,c
  1093  007BF6  EC77  F03A         	call	___wmul	;wreg free
  1094  007BFA  0E00               	movlw	low _rgb
  1095  007BFC  2401               	addwf	?___wmul^0,w,c
  1096  007BFE  6ED9               	movwf	fsr2l,c
  1097  007C00  0E01               	movlw	high _rgb
  1098  007C02  2002               	addwfc	(?___wmul+1)^0,w,c
  1099  007C04  6EDA               	movwf	fsr2h,c
  1100  007C06  0E00               	movlw	0
  1101  007C08  6EDE               	movwf	postinc2,c
  1102  007C0A  0E00               	movlw	0
  1103  007C0C  6EDD               	movwf	postdec2,c
  1104                           
  1105                           ;newmain.c: 114:         rgb[i].g = 1;
  1106  007C0E  C007  F001         	movff	initial@i,___wmul@multiplier
  1107  007C12  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1108  007C16  0E00               	movlw	0
  1109  007C18  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1110  007C1A  0E06               	movlw	6
  1111  007C1C  6E03               	movwf	___wmul@multiplicand^0,c
  1112  007C1E  EC77  F03A         	call	___wmul	;wreg free
  1113  007C22  0E02               	movlw	low (_rgb+2)
  1114  007C24  2401               	addwf	?___wmul^0,w,c
  1115  007C26  6ED9               	movwf	fsr2l,c
  1116  007C28  0E01               	movlw	high (_rgb+2)
  1117  007C2A  2002               	addwfc	(?___wmul+1)^0,w,c
  1118  007C2C  6EDA               	movwf	fsr2h,c
  1119  007C2E  0E01               	movlw	1
  1120  007C30  6EDE               	movwf	postinc2,c
  1121  007C32  0E00               	movlw	0
  1122  007C34  6EDD               	movwf	postdec2,c
  1123                           
  1124                           ;newmain.c: 115:         rgb[i].b = 0;
  1125  007C36  C007  F001         	movff	initial@i,___wmul@multiplier
  1126  007C3A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1127  007C3E  0E00               	movlw	0
  1128  007C40  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1129  007C42  0E06               	movlw	6
  1130  007C44  6E03               	movwf	___wmul@multiplicand^0,c
  1131  007C46  EC77  F03A         	call	___wmul	;wreg free
  1132  007C4A  0E04               	movlw	low (_rgb+4)
  1133  007C4C  2401               	addwf	?___wmul^0,w,c
  1134  007C4E  6ED9               	movwf	fsr2l,c
  1135  007C50  0E01               	movlw	high (_rgb+4)
  1136  007C52  2002               	addwfc	(?___wmul+1)^0,w,c
  1137  007C54  6EDA               	movwf	fsr2h,c
  1138  007C56  0E00               	movlw	0
  1139  007C58  6EDE               	movwf	postinc2,c
  1140  007C5A  0E00               	movlw	0
  1141  007C5C  6EDD               	movwf	postdec2,c
  1142  007C5E                     
  1143                           ;newmain.c: 116:     }
  1144  007C5E  4A07               	infsnz	initial@i^0,f,c
  1145  007C60  2A08               	incf	(initial@i+1)^0,f,c
  1146  007C62  BE08               	btfsc	(initial@i+1)^0,7,c
  1147  007C64  EF3D  F03E         	goto	u331
  1148  007C68  5008               	movf	(initial@i+1)^0,w,c
  1149  007C6A  E109               	bnz	u330
  1150  007C6C  0E10               	movlw	16
  1151  007C6E  5C07               	subwf	initial@i^0,w,c
  1152  007C70  A0D8               	btfss	status,0,c
  1153  007C72  EF3D  F03E         	goto	u331
  1154  007C76  EF3F  F03E         	goto	u330
  1155  007C7A                     u331:
  1156  007C7A  EFF3  F03D         	goto	l1116
  1157  007C7E                     u330:
  1158  007C7E                     
  1159                           ;newmain.c: 117:     for(i = 16;i < 20;i++){
  1160  007C7E  0E00               	movlw	0
  1161  007C80  6E08               	movwf	(initial@i+1)^0,c
  1162  007C82  0E10               	movlw	16
  1163  007C84  6E07               	movwf	initial@i^0,c
  1164  007C86                     l1128:
  1165                           
  1166                           ;newmain.c: 118:         rgb[i].r = 0;
  1167  007C86  C007  F001         	movff	initial@i,___wmul@multiplier
  1168  007C8A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1169  007C8E  0E00               	movlw	0
  1170  007C90  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1171  007C92  0E06               	movlw	6
  1172  007C94  6E03               	movwf	___wmul@multiplicand^0,c
  1173  007C96  EC77  F03A         	call	___wmul	;wreg free
  1174  007C9A  0E00               	movlw	low _rgb
  1175  007C9C  2401               	addwf	?___wmul^0,w,c
  1176  007C9E  6ED9               	movwf	fsr2l,c
  1177  007CA0  0E01               	movlw	high _rgb
  1178  007CA2  2002               	addwfc	(?___wmul+1)^0,w,c
  1179  007CA4  6EDA               	movwf	fsr2h,c
  1180  007CA6  0E00               	movlw	0
  1181  007CA8  6EDE               	movwf	postinc2,c
  1182  007CAA  0E00               	movlw	0
  1183  007CAC  6EDD               	movwf	postdec2,c
  1184                           
  1185                           ;newmain.c: 119:         rgb[i].g = 0;
  1186  007CAE  C007  F001         	movff	initial@i,___wmul@multiplier
  1187  007CB2  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1188  007CB6  0E00               	movlw	0
  1189  007CB8  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1190  007CBA  0E06               	movlw	6
  1191  007CBC  6E03               	movwf	___wmul@multiplicand^0,c
  1192  007CBE  EC77  F03A         	call	___wmul	;wreg free
  1193  007CC2  0E02               	movlw	low (_rgb+2)
  1194  007CC4  2401               	addwf	?___wmul^0,w,c
  1195  007CC6  6ED9               	movwf	fsr2l,c
  1196  007CC8  0E01               	movlw	high (_rgb+2)
  1197  007CCA  2002               	addwfc	(?___wmul+1)^0,w,c
  1198  007CCC  6EDA               	movwf	fsr2h,c
  1199  007CCE  0E00               	movlw	0
  1200  007CD0  6EDE               	movwf	postinc2,c
  1201  007CD2  0E00               	movlw	0
  1202  007CD4  6EDD               	movwf	postdec2,c
  1203                           
  1204                           ;newmain.c: 120:         rgb[i].b = 1;
  1205  007CD6  C007  F001         	movff	initial@i,___wmul@multiplier
  1206  007CDA  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1207  007CDE  0E00               	movlw	0
  1208  007CE0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1209  007CE2  0E06               	movlw	6
  1210  007CE4  6E03               	movwf	___wmul@multiplicand^0,c
  1211  007CE6  EC77  F03A         	call	___wmul	;wreg free
  1212  007CEA  0E04               	movlw	low (_rgb+4)
  1213  007CEC  2401               	addwf	?___wmul^0,w,c
  1214  007CEE  6ED9               	movwf	fsr2l,c
  1215  007CF0  0E01               	movlw	high (_rgb+4)
  1216  007CF2  2002               	addwfc	(?___wmul+1)^0,w,c
  1217  007CF4  6EDA               	movwf	fsr2h,c
  1218  007CF6  0E01               	movlw	1
  1219  007CF8  6EDE               	movwf	postinc2,c
  1220  007CFA  0E00               	movlw	0
  1221  007CFC  6EDD               	movwf	postdec2,c
  1222  007CFE                     
  1223                           ;newmain.c: 121:     }
  1224  007CFE  4A07               	infsnz	initial@i^0,f,c
  1225  007D00  2A08               	incf	(initial@i+1)^0,f,c
  1226  007D02  BE08               	btfsc	(initial@i+1)^0,7,c
  1227  007D04  EF8D  F03E         	goto	u341
  1228  007D08  5008               	movf	(initial@i+1)^0,w,c
  1229  007D0A  E109               	bnz	u340
  1230  007D0C  0E14               	movlw	20
  1231  007D0E  5C07               	subwf	initial@i^0,w,c
  1232  007D10  A0D8               	btfss	status,0,c
  1233  007D12  EF8D  F03E         	goto	u341
  1234  007D16  EF8F  F03E         	goto	u340
  1235  007D1A                     u341:
  1236  007D1A  EF43  F03E         	goto	l1128
  1237  007D1E                     u340:
  1238  007D1E                     
  1239                           ;newmain.c: 122:     for(i = 20;i < 24;i++){
  1240  007D1E  0E00               	movlw	0
  1241  007D20  6E08               	movwf	(initial@i+1)^0,c
  1242  007D22  0E14               	movlw	20
  1243  007D24  6E07               	movwf	initial@i^0,c
  1244  007D26                     l1140:
  1245                           
  1246                           ;newmain.c: 123:         rgb[i].r = 0;
  1247  007D26  C007  F001         	movff	initial@i,___wmul@multiplier
  1248  007D2A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1249  007D2E  0E00               	movlw	0
  1250  007D30  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1251  007D32  0E06               	movlw	6
  1252  007D34  6E03               	movwf	___wmul@multiplicand^0,c
  1253  007D36  EC77  F03A         	call	___wmul	;wreg free
  1254  007D3A  0E00               	movlw	low _rgb
  1255  007D3C  2401               	addwf	?___wmul^0,w,c
  1256  007D3E  6ED9               	movwf	fsr2l,c
  1257  007D40  0E01               	movlw	high _rgb
  1258  007D42  2002               	addwfc	(?___wmul+1)^0,w,c
  1259  007D44  6EDA               	movwf	fsr2h,c
  1260  007D46  0E00               	movlw	0
  1261  007D48  6EDE               	movwf	postinc2,c
  1262  007D4A  0E00               	movlw	0
  1263  007D4C  6EDD               	movwf	postdec2,c
  1264                           
  1265                           ;newmain.c: 124:         rgb[i].g = 0;
  1266  007D4E  C007  F001         	movff	initial@i,___wmul@multiplier
  1267  007D52  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1268  007D56  0E00               	movlw	0
  1269  007D58  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1270  007D5A  0E06               	movlw	6
  1271  007D5C  6E03               	movwf	___wmul@multiplicand^0,c
  1272  007D5E  EC77  F03A         	call	___wmul	;wreg free
  1273  007D62  0E02               	movlw	low (_rgb+2)
  1274  007D64  2401               	addwf	?___wmul^0,w,c
  1275  007D66  6ED9               	movwf	fsr2l,c
  1276  007D68  0E01               	movlw	high (_rgb+2)
  1277  007D6A  2002               	addwfc	(?___wmul+1)^0,w,c
  1278  007D6C  6EDA               	movwf	fsr2h,c
  1279  007D6E  0E00               	movlw	0
  1280  007D70  6EDE               	movwf	postinc2,c
  1281  007D72  0E00               	movlw	0
  1282  007D74  6EDD               	movwf	postdec2,c
  1283                           
  1284                           ;newmain.c: 125:         rgb[i].b = 0;
  1285  007D76  C007  F001         	movff	initial@i,___wmul@multiplier
  1286  007D7A  C008  F002         	movff	initial@i+1,___wmul@multiplier+1
  1287  007D7E  0E00               	movlw	0
  1288  007D80  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1289  007D82  0E06               	movlw	6
  1290  007D84  6E03               	movwf	___wmul@multiplicand^0,c
  1291  007D86  EC77  F03A         	call	___wmul	;wreg free
  1292  007D8A  0E04               	movlw	low (_rgb+4)
  1293  007D8C  2401               	addwf	?___wmul^0,w,c
  1294  007D8E  6ED9               	movwf	fsr2l,c
  1295  007D90  0E01               	movlw	high (_rgb+4)
  1296  007D92  2002               	addwfc	(?___wmul+1)^0,w,c
  1297  007D94  6EDA               	movwf	fsr2h,c
  1298  007D96  0E00               	movlw	0
  1299  007D98  6EDE               	movwf	postinc2,c
  1300  007D9A  0E00               	movlw	0
  1301  007D9C  6EDD               	movwf	postdec2,c
  1302  007D9E                     
  1303                           ;newmain.c: 126:     }
  1304  007D9E  4A07               	infsnz	initial@i^0,f,c
  1305  007DA0  2A08               	incf	(initial@i+1)^0,f,c
  1306  007DA2  BE08               	btfsc	(initial@i+1)^0,7,c
  1307  007DA4  EFDD  F03E         	goto	u351
  1308  007DA8  5008               	movf	(initial@i+1)^0,w,c
  1309  007DAA  E109               	bnz	u350
  1310  007DAC  0E18               	movlw	24
  1311  007DAE  5C07               	subwf	initial@i^0,w,c
  1312  007DB0  A0D8               	btfss	status,0,c
  1313  007DB2  EFDD  F03E         	goto	u351
  1314  007DB6  EFDF  F03E         	goto	u350
  1315  007DBA                     u351:
  1316  007DBA  EF93  F03E         	goto	l1140
  1317  007DBE                     u350:
  1318  007DBE  0012               	return		;funcret
  1319  007DC0                     __end_of_initial:
  1320                           	opt callstack 0
  1321                           
  1322 ;; *************** function ___wmul *****************
  1323 ;; Defined at:
  1324 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;  multiplier      2    0[COMRAM] unsigned int 
  1327 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;  product         2    4[COMRAM] unsigned int 
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  2    0[COMRAM] unsigned int 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0, prodl, prodh
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1339 ;;      Params:         4       0       0       0       0       0       0
  1340 ;;      Locals:         2       0       0       0       0       0       0
  1341 ;;      Temps:          0       0       0       0       0       0       0
  1342 ;;      Totals:         6       0       0       0       0       0       0
  1343 ;;Total ram usage:        6 bytes
  1344 ;; Hardware stack levels used:    1
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_initial
  1349 ;;		_main
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text3
  1354  0074EE                     __ptext3:
  1355                           	opt callstack 0
  1356  0074EE                     ___wmul:
  1357                           	opt callstack 29
  1358  0074EE  5001               	movf	___wmul@multiplier^0,w,c
  1359  0074F0  0203               	mulwf	___wmul@multiplicand^0,c
  1360  0074F2  CFF3 F005          	movff	prodl,___wmul@product
  1361  0074F6  CFF4 F006          	movff	prodh,___wmul@product+1
  1362  0074FA  5001               	movf	___wmul@multiplier^0,w,c
  1363  0074FC  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1364  0074FE  50F3               	movf	243,w,c
  1365  007500  2606               	addwf	(___wmul@product+1)^0,f,c
  1366  007502  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1367  007504  0203               	mulwf	___wmul@multiplicand^0,c
  1368  007506  50F3               	movf	243,w,c
  1369  007508  2606               	addwf	(___wmul@product+1)^0,f,c
  1370  00750A  C005  F001         	movff	___wmul@product,?___wmul
  1371  00750E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1372  007512  0012               	return		;funcret
  1373  007514                     __end_of___wmul:
  1374                           	opt callstack 0
  1375                           
  1376 ;; *************** function ___awdiv *****************
  1377 ;; Defined at:
  1378 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  dividend        2    0[COMRAM] int 
  1381 ;;  divisor         2    2[COMRAM] int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  quotient        2    6[COMRAM] int 
  1384 ;;  sign            1    5[COMRAM] unsigned char 
  1385 ;;  counter         1    4[COMRAM] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  2    0[COMRAM] int 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1395 ;;      Params:         4       0       0       0       0       0       0
  1396 ;;      Locals:         4       0       0       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0       0       0
  1398 ;;      Totals:         8       0       0       0       0       0       0
  1399 ;;Total ram usage:        8 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; This function calls:
  1402 ;;		Nothing
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text4
  1409  00754A                     __ptext4:
  1410                           	opt callstack 0
  1411  00754A                     ___awdiv:
  1412                           	opt callstack 30
  1413  00754A  0E00               	movlw	0
  1414  00754C  6E06               	movwf	___awdiv@sign^0,c
  1415  00754E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1416  007550  EFAE  F03A         	goto	u450
  1417  007554  EFAC  F03A         	goto	u451
  1418  007558                     u451:
  1419  007558  EFB4  F03A         	goto	l1274
  1420  00755C                     u450:
  1421  00755C  6C03               	negf	___awdiv@divisor^0,c
  1422  00755E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1423  007560  B0D8               	btfsc	status,0,c
  1424  007562  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1425  007564  0E01               	movlw	1
  1426  007566  6E06               	movwf	___awdiv@sign^0,c
  1427  007568                     l1274:
  1428  007568  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1429  00756A  EFBB  F03A         	goto	u460
  1430  00756E  EFB9  F03A         	goto	u461
  1431  007572                     u461:
  1432  007572  EFC1  F03A         	goto	l1280
  1433  007576                     u460:
  1434  007576  6C01               	negf	___awdiv@dividend^0,c
  1435  007578  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1436  00757A  B0D8               	btfsc	status,0,c
  1437  00757C  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1438  00757E  0E01               	movlw	1
  1439  007580  1A06               	xorwf	___awdiv@sign^0,f,c
  1440  007582                     l1280:
  1441  007582  0E00               	movlw	0
  1442  007584  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1443  007586  0E00               	movlw	0
  1444  007588  6E07               	movwf	___awdiv@quotient^0,c
  1445  00758A  5003               	movf	___awdiv@divisor^0,w,c
  1446  00758C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1447  00758E  B4D8               	btfsc	status,2,c
  1448  007590  EFCC  F03A         	goto	u471
  1449  007594  EFCE  F03A         	goto	u470
  1450  007598                     u471:
  1451  007598  EFF6  F03A         	goto	l1302
  1452  00759C                     u470:
  1453  00759C  0E01               	movlw	1
  1454  00759E  6E05               	movwf	___awdiv@counter^0,c
  1455  0075A0  EFD6  F03A         	goto	l1288
  1456  0075A4                     l1286:
  1457  0075A4  90D8               	bcf	status,0,c
  1458  0075A6  3603               	rlcf	___awdiv@divisor^0,f,c
  1459  0075A8  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1460  0075AA  2A05               	incf	___awdiv@counter^0,f,c
  1461  0075AC                     l1288:
  1462  0075AC  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1463  0075AE  EFDB  F03A         	goto	u481
  1464  0075B2  EFDD  F03A         	goto	u480
  1465  0075B6                     u481:
  1466  0075B6  EFD2  F03A         	goto	l1286
  1467  0075BA                     u480:
  1468  0075BA                     l1290:
  1469  0075BA  90D8               	bcf	status,0,c
  1470  0075BC  3607               	rlcf	___awdiv@quotient^0,f,c
  1471  0075BE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1472  0075C0  5003               	movf	___awdiv@divisor^0,w,c
  1473  0075C2  5C01               	subwf	___awdiv@dividend^0,w,c
  1474  0075C4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1475  0075C6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1476  0075C8  A0D8               	btfss	status,0,c
  1477  0075CA  EFE9  F03A         	goto	u491
  1478  0075CE  EFEB  F03A         	goto	u490
  1479  0075D2                     u491:
  1480  0075D2  EFF0  F03A         	goto	l1298
  1481  0075D6                     u490:
  1482  0075D6  5003               	movf	___awdiv@divisor^0,w,c
  1483  0075D8  5E01               	subwf	___awdiv@dividend^0,f,c
  1484  0075DA  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1485  0075DC  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1486  0075DE  8007               	bsf	___awdiv@quotient^0,0,c
  1487  0075E0                     l1298:
  1488  0075E0  90D8               	bcf	status,0,c
  1489  0075E2  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1490  0075E4  3203               	rrcf	___awdiv@divisor^0,f,c
  1491  0075E6  2E05               	decfsz	___awdiv@counter^0,f,c
  1492  0075E8  EFDD  F03A         	goto	l1290
  1493  0075EC                     l1302:
  1494  0075EC  5006               	movf	___awdiv@sign^0,w,c
  1495  0075EE  B4D8               	btfsc	status,2,c
  1496  0075F0  EFFC  F03A         	goto	u501
  1497  0075F4  EFFE  F03A         	goto	u500
  1498  0075F8                     u501:
  1499  0075F8  EF02  F03B         	goto	l1306
  1500  0075FC                     u500:
  1501  0075FC  6C07               	negf	___awdiv@quotient^0,c
  1502  0075FE  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1503  007600  B0D8               	btfsc	status,0,c
  1504  007602  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1505  007604                     l1306:
  1506  007604  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1507  007608  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1508  00760C  0012               	return		;funcret
  1509  00760E                     __end_of___awdiv:
  1510                           	opt callstack 0
  1511                           
  1512 ;; *************** function _ADC_Read *****************
  1513 ;; Defined at:
  1514 ;;		line 81 in file "newmain.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  digital         2    4[COMRAM] int 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  2    0[COMRAM] int 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1528 ;;      Params:         2       0       0       0       0       0       0
  1529 ;;      Locals:         2       0       0       0       0       0       0
  1530 ;;      Temps:          2       0       0       0       0       0       0
  1531 ;;      Totals:         6       0       0       0       0       0       0
  1532 ;;Total ram usage:        6 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text5
  1542  007514                     __ptext5:
  1543                           	opt callstack 0
  1544  007514                     _ADC_Read:
  1545                           	opt callstack 30
  1546  007514                     
  1547                           ;newmain.c: 83:     int digital;;newmain.c: 85:     ADCON0bits.CHS = 0;
  1548  007514  0EC3               	movlw	-61
  1549  007516  16C2               	andwf	194,f,c	;volatile
  1550  007518                     
  1551                           ;newmain.c: 86:     ADCON0bits.GO = 1;
  1552  007518  82C2               	bsf	194,1,c	;volatile
  1553  00751A                     
  1554                           ;newmain.c: 87:     ADCON0bits.ADON = 1;
  1555  00751A  80C2               	bsf	194,0,c	;volatile
  1556  00751C                     l34:
  1557  00751C  B2C2               	btfsc	194,1,c	;volatile
  1558  00751E  EF93  F03A         	goto	u291
  1559  007522  EF95  F03A         	goto	u290
  1560  007526                     u291:
  1561  007526  EF8E  F03A         	goto	l34
  1562  00752A                     u290:
  1563  00752A                     
  1564                           ;newmain.c: 91:     digital = (ADRESH*256) | (ADRESL);
  1565  00752A  50C3               	movf	195,w,c	;volatile
  1566  00752C  CFC4 F003          	movff	4036,??_ADC_Read	;volatile
  1567  007530  6A04               	clrf	(??_ADC_Read+1)^0,c
  1568  007532  C003  F004         	movff	??_ADC_Read,??_ADC_Read+1
  1569  007536  6A03               	clrf	??_ADC_Read^0,c
  1570  007538  1003               	iorwf	??_ADC_Read^0,w,c
  1571  00753A  6E05               	movwf	ADC_Read@digital^0,c
  1572  00753C  5004               	movf	(??_ADC_Read+1)^0,w,c
  1573  00753E  6E06               	movwf	(ADC_Read@digital+1)^0,c
  1574  007540                     
  1575                           ;newmain.c: 92:     return(digital);
  1576  007540  C005  F001         	movff	ADC_Read@digital,?_ADC_Read
  1577  007544  C006  F002         	movff	ADC_Read@digital+1,?_ADC_Read+1
  1578  007548  0012               	return		;funcret
  1579  00754A                     __end_of_ADC_Read:
  1580                           	opt callstack 0
  1581                           
  1582 ;; *************** function _ADC_Initialize *****************
  1583 ;; Defined at:
  1584 ;;		line 71 in file "newmain.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, status,2
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1598 ;;      Params:         0       0       0       0       0       0       0
  1599 ;;      Locals:         0       0       0       0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0       0       0
  1601 ;;      Totals:         0       0       0       0       0       0       0
  1602 ;;Total ram usage:        0 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_main
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           	psect	text6
  1612  0074D2                     __ptext6:
  1613                           	opt callstack 0
  1614  0074D2                     _ADC_Initialize:
  1615                           	opt callstack 30
  1616  0074D2                     
  1617                           ;newmain.c: 73:     TRISA = 1;
  1618  0074D2  0E01               	movlw	1
  1619  0074D4  6E92               	movwf	146,c	;volatile
  1620                           
  1621                           ;newmain.c: 74:     ADCON1 = 0x0e;
  1622  0074D6  0E0E               	movlw	14
  1623  0074D8  6EC1               	movwf	193,c	;volatile
  1624                           
  1625                           ;newmain.c: 75:     ADCON2 = 0x90;
  1626  0074DA  0E90               	movlw	144
  1627  0074DC  6EC0               	movwf	192,c	;volatile
  1628  0074DE                     
  1629                           ;newmain.c: 76:     ADFM = 1 ;
  1630  0074DE  8EC0               	bsf	4032,7,c	;volatile
  1631                           
  1632                           ;newmain.c: 77:     ADCON2bits.ADCS = 0;
  1633  0074E0  0EF8               	movlw	-8
  1634  0074E2  16C0               	andwf	192,f,c	;volatile
  1635                           
  1636                           ;newmain.c: 78:     ADRESH=0;
  1637  0074E4  0E00               	movlw	0
  1638  0074E6  6EC4               	movwf	196,c	;volatile
  1639                           
  1640                           ;newmain.c: 79:     ADRESL=0;
  1641  0074E8  0E00               	movlw	0
  1642  0074EA  6EC3               	movwf	195,c	;volatile
  1643  0074EC  0012               	return		;funcret
  1644  0074EE                     __end_of_ADC_Initialize:
  1645                           	opt callstack 0
  1646  0000                     
  1647                           	psect	rparam
  1648  0000                     tosu	equ	0xFFF
  1649                           tosh	equ	0xFFE
  1650                           tosl	equ	0xFFD
  1651                           stkptr	equ	0xFFC
  1652                           pclatu	equ	0xFFB
  1653                           pclath	equ	0xFFA
  1654                           pcl	equ	0xFF9
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           prodh	equ	0xFF4
  1660                           prodl	equ	0xFF3
  1661                           indf0	equ	0xFEF
  1662                           postinc0	equ	0xFEE
  1663                           postdec0	equ	0xFED
  1664                           preinc0	equ	0xFEC
  1665                           plusw0	equ	0xFEB
  1666                           fsr0h	equ	0xFEA
  1667                           fsr0l	equ	0xFE9
  1668                           wreg	equ	0xFE8
  1669                           indf1	equ	0xFE7
  1670                           postinc1	equ	0xFE6
  1671                           postdec1	equ	0xFE5
  1672                           preinc1	equ	0xFE4
  1673                           plusw1	equ	0xFE3
  1674                           fsr1h	equ	0xFE2
  1675                           fsr1l	equ	0xFE1
  1676                           bsr	equ	0xFE0
  1677                           indf2	equ	0xFDF
  1678                           postinc2	equ	0xFDE
  1679                           postdec2	equ	0xFDD
  1680                           preinc2	equ	0xFDC
  1681                           plusw2	equ	0xFDB
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     46      48
    BANK0           128      0       0
    BANK1           256      0     144
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           244      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_rotate_r
    _rotate_r->___awdiv
    _initial->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    8671
                                             39 COMRAM     7     7      0
                     _ADC_Initialize
                           _ADC_Read
                            ___awdiv
                             ___wmul
                            _initial
                           _rotate_r
 ---------------------------------------------------------------------------------
 (1) _rotate_r                                            31    29      2     511
                                              8 COMRAM    31    29      2
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _initial                                              2     2      0    4023
                                              6 COMRAM     2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3351
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_Read
   ___awdiv
   ___wmul
   _initial
     ___wmul
   _rotate_r
     ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F3      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      90       6       56.3%
BITBANK5            F4      0       0      15        0.0%
BANK5               F4      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     2E      30       1       37.8%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0      14        0.0%
DATA                 0      0      C0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Dec 15 00:42:14 2019

                     l31 74EC                       l34 751C                       l52 7DBE  
                     l37 7548                       l65 79FC                       l77 7512  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l308 760C                      l756 74D2  
                    l758 74DE             __CFG_CPB$OFF 000000                      u300 7A9E  
                    u301 7A9A                      u310 7B3E                      u311 7B3A  
                    u320 7BDE                      u400 78C6                      u321 7BDA  
                    u401 78C2                      u330 7C7E                      u410 78E8  
                    u331 7C7A                      u411 78E4                      u500 75FC  
                    u340 7D1E                      u501 75F8                      u341 7D1A  
                    u421 7902                      u350 7DBE                      u510 7720  
                    u351 7DBA                      u431 7914                      u511 7718  
                    u440 79FC                      u360 778C                      u441 79F8  
                    u361 7788                      u290 752A                      u450 755C  
                    u370 77B2             __CFG_CPD$OFF 000000                      u291 7526  
                    u451 7558                      u371 77AE                      u460 7576  
                    u461 7572                      u381 77CC                      u525 7730  
                    u470 759C                      u518 7722                      u471 7598  
                    u391 77DE                      u535 773A                      u527 7732  
                    u480 75BA                      u560 7768                      u481 75B6  
                    u561 7764                      u545 7744                      u537 773C  
                    u490 75D6                      u491 75D2                      u555 774E  
                    u547 7746                      u556 7750                      u577 7702  
                    _rgb 0100                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1110 7BDE                     l1120 7C62  
                   l1104 7B46                     l1200 7896                     l1130 7CFE  
                   l1122 7C7E                     l1106 7BBE                     l1210 78E8  
                   l1202 789E                     l1300 75E6                     l1140 7D26  
                   l1132 7D02                     l1116 7BE6                     l1108 7BC2  
                   l1220 7934                     l1212 78F8                     l1204 78A6  
                   l1070 7540                     l1062 7514                     l1302 75EC  
                   l1142 7D9E                     l1134 7D1E                     l1118 7C5E  
                   l1230 795C                     l1222 793C                     l1214 791C  
                   l1206 78AC                     l1150 7794                     l1310 760E  
                   l1064 7518                     l1304 75FC                     l1056 74EE  
                   l1144 7DA2                     l1128 7C86                     l1080 7A06  
                   l1240 7984                     l1232 7964                     l1224 7944  
                   l1216 7924                     l1160 77F6                     l1152 77B2  
                   l1208 78CA                     l1320 7620                     l1312 7612  
                   l1066 751A                     l1306 7604                     l1058 750A  
                   l1082 7A7E                     l1074 79FE                     l1250 79AC  
                   l1242 798C                     l1234 796C                     l1226 794C  
                   l1218 792C                     l1170 781E                     l1162 77FE  
                   l1154 77C2                     l1146 7770                     l1330 769E  
                   l1322 7628                     l1314 7616                     l1068 752A  
                   l1092 7AA6                     l1084 7A82                     l1260 79D4  
                   l1252 79B4                     l1244 7994                     l1236 7974  
                   l1228 7954                     l1180 7846                     l1172 7826  
                   l1164 7806                     l1156 77E6                     l1148 778C  
                   l1340 770C                     l1332 76CE                     l1324 7634  
                   l1316 761A                     l1270 755C                     l1094 7B1E  
                   l1086 7A9E                     l1262 79DC                     l1254 79BC  
                   l1246 799C                     l1238 797C                     l1190 786E  
                   l1182 784E                     l1174 782E                     l1166 780E  
                   l1158 77EE                     l1350 7746                     l1342 770E  
                   l1334 7700                     l1326 7654                     l1318 761E  
                   l1280 7582                     l1272 7564                     l1096 7B22  
                   l1256 79C4                     l1248 79A4                     l1264 79E2  
                   l1192 7876                     l1184 7856                     l1176 7836  
                   l1168 7816                     l1352 7750                     l1344 7728  
                   l1336 7708                     l1328 7670                     l1290 75BA  
                   l1282 758A                     l1274 7568                     l1266 754A  
                   l1098 7B3E                     l1258 79CC                     l1194 787E  
                   l1186 785E                     l1178 783E                     l1354 7754  
                   l1346 7732                     l1338 770A                     l1292 75C0  
                   l1284 759C                     l1276 7576                     l1268 754E  
                   l1196 7886                     l1188 7866                     l1348 773C  
                   l1294 75D6                     l1286 75A4                     l1278 757E  
                   l1198 788E                     l1296 75DE                     l1288 75AC  
                   l1298 75E0                     _ADFM 007E07                     _LATD 000F8C  
                   _main 760E                     indf2 000FDF                     fsr2l 000FD9  
       __end_of_ADC_Read 754A                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001          __end_of___awdiv 760E  
        ___awdiv@divisor 0003          ___awdiv@counter 0005                    _TRISA 000F92  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        __end_of_initial 7DC0                    main@i 002D                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8          __initialization 74BC  
           __end_of_main 7770                   ??_main 0028            __activetblptr 000000  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0001           __CFG_XINST$OFF 000000  
                 ___wmul 74EE                ??___awdiv 0005           __CFG_STVREN$ON 000000  
        ADC_Read@digital 0005                   clear_0 74C2         ___awdiv@quotient 0007  
              ??_initial 0007                ?_ADC_Read 0001         __end_of_rotate_r 79FE  
             __accesstop 0080  __end_of__initialization 74CC          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001               ??_ADC_Read 0003  
             __pbssBANK1 0100                  ?___wmul 0001            rotate_r@tempa 0010  
          rotate_r@tempb 0016            rotate_r@tempc 001C            rotate_r@tempd 0022  
__size_of_ADC_Initialize 001C          rotate_r@buf_212 000E                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 754A          __size_of___wmul 0026  
              ?_rotate_r 0009                  __pcinit 74BC                  __ramtop 0600  
                __ptext0 760E                  __ptext1 7770                  __ptext2 79FE  
                __ptext3 74EE                  __ptext4 754A                  __ptext5 7514  
                __ptext6 74D2                  _initial 79FE                  main@val 002B  
   end_of_initialization 74CC                  postdec2 000FDD               _original_r 002F  
                postinc0 000FEE                  postinc2 000FDE               ??_rotate_r 000B  
      __size_of_ADC_Read 0036           __end_of___wmul 7514           _ADC_Initialize 74D2  
    start_initialization 74BC              rotate_r@buf 000C              rotate_r@val 0009  
       __CFG_OSC$INTIO67 000000                 ??___wmul 0005   __end_of_ADC_Initialize 74EE  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 002F        __CFG_CCP2MX$PORTC 000000  
               ?___awdiv 0001          ?_ADC_Initialize 0001        __size_of_rotate_r 028E  
               ?_initial 0001                 _ADC_Read 7514           ___wmul@product 0005  
               _LATDbits 000F8C         __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2  
             _ADCON2bits 000FC0        ___wmul@multiplier 0001                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of___awdiv 00C4  
       __size_of_initial 03C2            __size_of_main 0162                 _rotate_r 7770  
               main@temp 0029                 initial@i 0007         ??_ADC_Initialize 0001  
